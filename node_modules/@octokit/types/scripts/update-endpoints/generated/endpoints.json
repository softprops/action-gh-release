[
  {
    "name": "Get the authenticated GitHub App",
    "scope": "apps",
    "id": "getAuthenticated",
    "method": "GET",
    "url": "/app",
    "parameters": []
  },
  {
    "name": "Create a GitHub App from a manifest",
    "scope": "apps",
    "id": "createFromManifest",
    "method": "POST",
    "url": "/app-manifests/{code}/conversions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "code parameter",
        "enum": null,
        "name": "code",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List installations",
    "scope": "apps",
    "id": "listInstallations",
    "method": "GET",
    "url": "/app/installations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get an installation",
    "scope": "apps",
    "id": "getInstallation",
    "method": "GET",
    "url": "/app/installations/{installation_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "installation_id parameter",
        "enum": null,
        "name": "installation_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete an installation",
    "scope": "apps",
    "id": "deleteInstallation",
    "method": "DELETE",
    "url": "/app/installations/{installation_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "installation_id parameter",
        "enum": null,
        "name": "installation_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Create a new installation token",
    "scope": "apps",
    "id": "createInstallationToken",
    "method": "POST",
    "url": "/app/installations/{installation_id}/access_tokens",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "installation_id parameter",
        "enum": null,
        "name": "installation_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The `id`s of the repositories that the installation token can access. Providing repository `id`s restricts the access of an installation token to specific repositories. You can use the \"[List repositories](https://developer.github.com/v3/apps/installations/#list-repositories)\" endpoint to get the `id` of all repositories that an installation can access. For example, you can select specific repositories when creating an installation token to restrict the number of repositories that can be cloned using the token.",
        "enum": null,
        "name": "repository_ids",
        "type": "integer[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permissions granted to the access token. The permissions object includes the permission names and their access type. For a complete list of permissions and allowable values, see \"[GitHub App permissions](https://developer.github.com/apps/building-github-apps/creating-github-apps-using-url-parameters/#github-app-permissions).\"",
        "enum": null,
        "name": "permissions",
        "type": "object",
        "required": false
      }
    ]
  },
  {
    "name": "List your grants",
    "scope": "oauthAuthorizations",
    "id": "listGrants",
    "method": "GET",
    "url": "/applications/grants",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single grant",
    "scope": "oauthAuthorizations",
    "id": "getGrant",
    "method": "GET",
    "url": "/applications/grants/{grant_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "grant_id parameter",
        "enum": null,
        "name": "grant_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a grant",
    "scope": "oauthAuthorizations",
    "id": "deleteGrant",
    "method": "DELETE",
    "url": "/applications/grants/{grant_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "grant_id parameter",
        "enum": null,
        "name": "grant_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Revoke a grant for an application",
    "scope": "oauthAuthorizations",
    "id": "revokeGrantForApplication",
    "method": "DELETE",
    "url": "/applications/{client_id}/grants/{access_token}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "access_token parameter",
        "enum": null,
        "name": "access_token",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Check an authorization",
    "scope": "oauthAuthorizations",
    "id": "checkAuthorization",
    "method": "GET",
    "url": "/applications/{client_id}/tokens/{access_token}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "access_token parameter",
        "enum": null,
        "name": "access_token",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Reset an authorization",
    "scope": "oauthAuthorizations",
    "id": "resetAuthorization",
    "method": "POST",
    "url": "/applications/{client_id}/tokens/{access_token}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "access_token parameter",
        "enum": null,
        "name": "access_token",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Revoke an authorization for an application",
    "scope": "oauthAuthorizations",
    "id": "revokeAuthorizationForApplication",
    "method": "DELETE",
    "url": "/applications/{client_id}/tokens/{access_token}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "access_token parameter",
        "enum": null,
        "name": "access_token",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single GitHub App",
    "scope": "apps",
    "id": "getBySlug",
    "method": "GET",
    "url": "/apps/{app_slug}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "app_slug parameter",
        "enum": null,
        "name": "app_slug",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List your authorizations",
    "scope": "oauthAuthorizations",
    "id": "listAuthorizations",
    "method": "GET",
    "url": "/authorizations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a new authorization",
    "scope": "oauthAuthorizations",
    "id": "createAuthorization",
    "method": "POST",
    "url": "/authorizations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of scopes that this authorization is in.",
        "enum": null,
        "name": "scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL to remind you what app the OAuth token is for.",
        "enum": null,
        "name": "note_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The 20 character OAuth app client key for which to create the token.",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The 40 character OAuth app client secret for which to create the token.",
        "enum": null,
        "name": "client_secret",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
        "enum": null,
        "name": "fingerprint",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get-or-create an authorization for a specific app",
    "scope": "oauthAuthorizations",
    "id": "getOrCreateAuthorizationForApp",
    "method": "PUT",
    "url": "/authorizations/clients/{client_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
        "enum": null,
        "name": "client_secret",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of scopes that this authorization is in.",
        "enum": null,
        "name": "scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A note to remind you what the OAuth token is for.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL to remind you what app the OAuth token is for.",
        "enum": null,
        "name": "note_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A unique string to distinguish an authorization from others created for the same client and user. If provided, this API is functionally equivalent to [Get-or-create an authorization for a specific app and fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint).",
        "enum": null,
        "name": "fingerprint",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get-or-create an authorization for a specific app and fingerprint",
    "scope": "oauthAuthorizations",
    "id": "getOrCreateAuthorizationForAppAndFingerprint",
    "method": "PUT",
    "url": "/authorizations/clients/{client_id}/{fingerprint}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "fingerprint parameter",
        "enum": null,
        "name": "fingerprint",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
        "enum": null,
        "name": "client_secret",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of scopes that this authorization is in.",
        "enum": null,
        "name": "scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A note to remind you what the OAuth token is for.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL to remind you what app the OAuth token is for.",
        "enum": null,
        "name": "note_url",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get-or-create an authorization for a specific app and fingerprint",
    "scope": "oauthAuthorizations",
    "id": "getOrCreateAuthorizationForAppFingerprint",
    "method": "PUT",
    "url": "/authorizations/clients/{client_id}/{fingerprint}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "client_id parameter",
        "enum": null,
        "name": "client_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "fingerprint parameter",
        "enum": null,
        "name": "fingerprint",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL.",
        "enum": null,
        "name": "client_secret",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of scopes that this authorization is in.",
        "enum": null,
        "name": "scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A note to remind you what the OAuth token is for.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL to remind you what app the OAuth token is for.",
        "enum": null,
        "name": "note_url",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single authorization",
    "scope": "oauthAuthorizations",
    "id": "getAuthorization",
    "method": "GET",
    "url": "/authorizations/{authorization_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "authorization_id parameter",
        "enum": null,
        "name": "authorization_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Update an existing authorization",
    "scope": "oauthAuthorizations",
    "id": "updateAuthorization",
    "method": "PATCH",
    "url": "/authorizations/{authorization_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "authorization_id parameter",
        "enum": null,
        "name": "authorization_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Replaces the authorization scopes with these.",
        "enum": null,
        "name": "scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of scopes to add to this authorization.",
        "enum": null,
        "name": "add_scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of scopes to remove from this authorization.",
        "enum": null,
        "name": "remove_scopes",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL to remind you what app the OAuth token is for.",
        "enum": null,
        "name": "note_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
        "enum": null,
        "name": "fingerprint",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Delete an authorization",
    "scope": "oauthAuthorizations",
    "id": "deleteAuthorization",
    "method": "DELETE",
    "url": "/authorizations/{authorization_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "authorization_id parameter",
        "enum": null,
        "name": "authorization_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List all codes of conduct",
    "scope": "codesOfConduct",
    "id": "listConductCodes",
    "method": "GET",
    "url": "/codes_of_conduct",
    "parameters": []
  },
  {
    "name": "Get an individual code of conduct",
    "scope": "codesOfConduct",
    "id": "getConductCode",
    "method": "GET",
    "url": "/codes_of_conduct/{key}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "key parameter",
        "enum": null,
        "name": "key",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create a content attachment",
    "scope": "apps",
    "id": "createContentAttachment",
    "method": "POST",
    "url": "/content_references/{content_reference_id}/attachments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "content_reference_id parameter",
        "enum": null,
        "name": "content_reference_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the content attachment displayed in the body or comment of an issue or pull request.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The body text of the content attachment displayed in the body or comment of an issue or pull request. This parameter supports markdown.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get",
    "scope": "emojis",
    "id": "get",
    "method": "GET",
    "url": "/emojis",
    "parameters": []
  },
  {
    "name": "List public events",
    "scope": "activity",
    "id": "listPublicEvents",
    "method": "GET",
    "url": "/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List feeds",
    "scope": "activity",
    "id": "listFeeds",
    "method": "GET",
    "url": "/feeds",
    "parameters": []
  },
  {
    "name": "List the authenticated user's gists or if called anonymously, this will return all public gists",
    "scope": "gists",
    "id": "list",
    "method": "GET",
    "url": "/gists",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a gist",
    "scope": "gists",
    "id": "create",
    "method": "POST",
    "url": "/gists",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The filenames and content of each file in the gist. The keys in the `files` object represent the filename and have the type `string`.",
        "enum": null,
        "name": "files",
        "type": "object",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The content of the file.",
        "enum": null,
        "name": "files.content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A descriptive name for this gist.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "When `true`, the gist will be public and available for anyone to see.",
        "enum": null,
        "name": "public",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "List all public gists",
    "scope": "gists",
    "id": "listPublic",
    "method": "GET",
    "url": "/gists/public",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List starred gists",
    "scope": "gists",
    "id": "listStarred",
    "method": "GET",
    "url": "/gists/starred",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single gist",
    "scope": "gists",
    "id": "get",
    "method": "GET",
    "url": "/gists/{gist_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a gist",
    "scope": "gists",
    "id": "update",
    "method": "PATCH",
    "url": "/gists/{gist_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A descriptive name for this gist.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The filenames and content that make up this gist.",
        "enum": null,
        "name": "files",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The updated content of the file.",
        "enum": null,
        "name": "files.content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new name for this file. To delete a file, set the value of the filename to `null`.",
        "enum": null,
        "name": "files.filename",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a gist",
    "scope": "gists",
    "id": "delete",
    "method": "DELETE",
    "url": "/gists/{gist_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List comments on a gist",
    "scope": "gists",
    "id": "listComments",
    "method": "GET",
    "url": "/gists/{gist_id}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a comment",
    "scope": "gists",
    "id": "createComment",
    "method": "POST",
    "url": "/gists/{gist_id}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The comment text.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single comment",
    "scope": "gists",
    "id": "getComment",
    "method": "GET",
    "url": "/gists/{gist_id}/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a comment",
    "scope": "gists",
    "id": "updateComment",
    "method": "PATCH",
    "url": "/gists/{gist_id}/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The comment text.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a comment",
    "scope": "gists",
    "id": "deleteComment",
    "method": "DELETE",
    "url": "/gists/{gist_id}/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List gist commits",
    "scope": "gists",
    "id": "listCommits",
    "method": "GET",
    "url": "/gists/{gist_id}/commits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Fork a gist",
    "scope": "gists",
    "id": "fork",
    "method": "POST",
    "url": "/gists/{gist_id}/forks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List gist forks",
    "scope": "gists",
    "id": "listForks",
    "method": "GET",
    "url": "/gists/{gist_id}/forks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Star a gist",
    "scope": "gists",
    "id": "star",
    "method": "PUT",
    "url": "/gists/{gist_id}/star",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Unstar a gist",
    "scope": "gists",
    "id": "unstar",
    "method": "DELETE",
    "url": "/gists/{gist_id}/star",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Check if a gist is starred",
    "scope": "gists",
    "id": "checkIsStarred",
    "method": "GET",
    "url": "/gists/{gist_id}/star",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a specific revision of a gist",
    "scope": "gists",
    "id": "getRevision",
    "method": "GET",
    "url": "/gists/{gist_id}/{sha}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gist_id parameter",
        "enum": null,
        "name": "gist_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "sha parameter",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Listing available templates",
    "scope": "gitignore",
    "id": "listTemplates",
    "method": "GET",
    "url": "/gitignore/templates",
    "parameters": []
  },
  {
    "name": "Get a single template",
    "scope": "gitignore",
    "id": "getTemplate",
    "method": "GET",
    "url": "/gitignore/templates/{name}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "name parameter",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List repositories",
    "scope": "apps",
    "id": "listRepos",
    "method": "GET",
    "url": "/installation/repositories",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories",
    "scope": "issues",
    "id": "list",
    "method": "GET",
    "url": "/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
        "enum": ["assigned", "created", "mentioned", "subscribed", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "enum": null,
        "name": "labels",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
        "enum": ["created", "updated", "comments"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The direction of the sort. Can be either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Search issues",
    "scope": "search",
    "id": "issuesLegacy",
    "method": "GET",
    "url": "/legacy/issues/search/{owner}/{repository}/{state}/{keyword}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repository parameter",
        "enum": null,
        "name": "repository",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the issues to return. Can be either `open` or `closed`.",
        "enum": ["open", "closed"],
        "name": "state",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The search term.",
        "enum": null,
        "name": "keyword",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Search repositories",
    "scope": "search",
    "id": "reposLegacy",
    "method": "GET",
    "url": "/legacy/repos/search/{keyword}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The search term.",
        "enum": null,
        "name": "keyword",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter results by language.",
        "enum": null,
        "name": "language",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The page number to fetch.",
        "enum": null,
        "name": "start_page",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.",
        "enum": ["stars", "forks", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "order",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Email search",
    "scope": "search",
    "id": "emailLegacy",
    "method": "GET",
    "url": "/legacy/user/email/{email}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email address.",
        "enum": null,
        "name": "email",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Search users",
    "scope": "search",
    "id": "usersLegacy",
    "method": "GET",
    "url": "/legacy/user/search/{keyword}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The search term.",
        "enum": null,
        "name": "keyword",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The page number to fetch.",
        "enum": null,
        "name": "start_page",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.",
        "enum": ["stars", "forks", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "order",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List commonly used licenses",
    "scope": "licenses",
    "id": "listCommonlyUsed",
    "method": "GET",
    "url": "/licenses",
    "parameters": []
  },
  {
    "name": "List commonly used licenses",
    "scope": "licenses",
    "id": "list",
    "method": "GET",
    "url": "/licenses",
    "parameters": []
  },
  {
    "name": "Get an individual license",
    "scope": "licenses",
    "id": "get",
    "method": "GET",
    "url": "/licenses/{license}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "license parameter",
        "enum": null,
        "name": "license",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Render an arbitrary Markdown document",
    "scope": "markdown",
    "id": "render",
    "method": "POST",
    "url": "/markdown",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The Markdown text to render in HTML. Markdown content must be 400 KB or less.",
        "enum": null,
        "name": "text",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The rendering mode. Can be either:  \n\\* `markdown` to render a document in plain Markdown, just like README.md files are rendered.  \n\\* `gfm` to render a document in [GitHub Flavored Markdown](https://github.github.com/gfm/), which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests.",
        "enum": ["markdown", "gfm"],
        "name": "mode",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The repository context to use when creating references in `gfm` mode. Omit this parameter when using `markdown` mode.",
        "enum": null,
        "name": "context",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Render a Markdown document in raw mode",
    "scope": "markdown",
    "id": "renderRaw",
    "method": "POST",
    "url": "/markdown/raw",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "data parameter",
        "enum": null,
        "name": "data",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Check if a GitHub account is associated with any Marketplace listing",
    "scope": "apps",
    "id": "checkAccountIsAssociatedWithAny",
    "method": "GET",
    "url": "/marketplace_listing/accounts/{account_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "account_id parameter",
        "enum": null,
        "name": "account_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all plans for your Marketplace listing",
    "scope": "apps",
    "id": "listPlans",
    "method": "GET",
    "url": "/marketplace_listing/plans",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all GitHub accounts (user or organization) on a specific plan",
    "scope": "apps",
    "id": "listAccountsUserOrOrgOnPlan",
    "method": "GET",
    "url": "/marketplace_listing/plans/{plan_id}/accounts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "plan_id parameter",
        "enum": null,
        "name": "plan_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if a GitHub account is associated with any Marketplace listing (stubbed)",
    "scope": "apps",
    "id": "checkAccountIsAssociatedWithAnyStubbed",
    "method": "GET",
    "url": "/marketplace_listing/stubbed/accounts/{account_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "account_id parameter",
        "enum": null,
        "name": "account_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all plans for your Marketplace listing (stubbed)",
    "scope": "apps",
    "id": "listPlansStubbed",
    "method": "GET",
    "url": "/marketplace_listing/stubbed/plans",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all GitHub accounts (user or organization) on a specific plan (stubbed)",
    "scope": "apps",
    "id": "listAccountsUserOrOrgOnPlanStubbed",
    "method": "GET",
    "url": "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "plan_id parameter",
        "enum": null,
        "name": "plan_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get",
    "scope": "meta",
    "id": "get",
    "method": "GET",
    "url": "/meta",
    "parameters": []
  },
  {
    "name": "List public events for a network of repositories",
    "scope": "activity",
    "id": "listPublicEventsForRepoNetwork",
    "method": "GET",
    "url": "/networks/{owner}/{repo}/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List your notifications",
    "scope": "activity",
    "id": "listNotifications",
    "method": "GET",
    "url": "/notifications",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If `true`, show notifications marked as read.",
        "enum": null,
        "name": "all",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
        "enum": null,
        "name": "participating",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "before",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Mark as read",
    "scope": "activity",
    "id": "markAsRead",
    "method": "PUT",
    "url": "/notifications",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
        "enum": null,
        "name": "last_read_at",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "View a single thread",
    "scope": "activity",
    "id": "getThread",
    "method": "GET",
    "url": "/notifications/threads/{thread_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "thread_id parameter",
        "enum": null,
        "name": "thread_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Mark a thread as read",
    "scope": "activity",
    "id": "markThreadAsRead",
    "method": "PATCH",
    "url": "/notifications/threads/{thread_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "thread_id parameter",
        "enum": null,
        "name": "thread_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Get a thread subscription",
    "scope": "activity",
    "id": "getThreadSubscription",
    "method": "GET",
    "url": "/notifications/threads/{thread_id}/subscription",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "thread_id parameter",
        "enum": null,
        "name": "thread_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Set a thread subscription",
    "scope": "activity",
    "id": "setThreadSubscription",
    "method": "PUT",
    "url": "/notifications/threads/{thread_id}/subscription",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "thread_id parameter",
        "enum": null,
        "name": "thread_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to block all notifications from this thread.",
        "enum": null,
        "name": "ignored",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a thread subscription",
    "scope": "activity",
    "id": "deleteThreadSubscription",
    "method": "DELETE",
    "url": "/notifications/threads/{thread_id}/subscription",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "thread_id parameter",
        "enum": null,
        "name": "thread_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List all organizations",
    "scope": "orgs",
    "id": "list",
    "method": "GET",
    "url": "/organizations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The integer ID of the last Organization that you've seen.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get an organization",
    "scope": "orgs",
    "id": "get",
    "method": "GET",
    "url": "/orgs/{org}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Edit an organization",
    "scope": "orgs",
    "id": "update",
    "method": "PATCH",
    "url": "/orgs/{org}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Billing email address. This address is not publicized.",
        "enum": null,
        "name": "billing_email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The company name.",
        "enum": null,
        "name": "company",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The publicly visible email address.",
        "enum": null,
        "name": "email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The location.",
        "enum": null,
        "name": "location",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The shorthand name of the company.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the company.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Toggles whether organization projects are enabled for the organization.",
        "enum": null,
        "name": "has_organization_projects",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Toggles whether repository projects are enabled for repositories that belong to the organization.",
        "enum": null,
        "name": "has_repository_projects",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.",
        "enum": ["read", "write", "admin", "none"],
        "name": "default_repository_permission",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only admin members can create repositories.  \nDefault: `true`  \n**Note:** Another parameter can override the this parameter. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details. **Note:** Another parameter can override the this parameter. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.",
        "enum": null,
        "name": "members_can_create_repositories",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on [GitHub Business Cloud](https://github.com/pricing/business-cloud).  \n\\* `none` - only admin members can create repositories.  \n**Note:** Using this parameter will override values set in `members_can_create_repositories`. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.",
        "enum": ["all", "private", "none"],
        "name": "members_allowed_repository_creation_type",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List blocked users",
    "scope": "orgs",
    "id": "listBlockedUsers",
    "method": "GET",
    "url": "/orgs/{org}/blocks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Check whether a user is blocked from an organization",
    "scope": "orgs",
    "id": "checkBlockedUser",
    "method": "GET",
    "url": "/orgs/{org}/blocks/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Block a user",
    "scope": "orgs",
    "id": "blockUser",
    "method": "PUT",
    "url": "/orgs/{org}/blocks/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Unblock a user",
    "scope": "orgs",
    "id": "unblockUser",
    "method": "DELETE",
    "url": "/orgs/{org}/blocks/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List credential authorizations for an organization",
    "scope": "orgs",
    "id": "listCredentialAuthorizations",
    "method": "GET",
    "url": "/orgs/{org}/credential-authorizations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove a credential authorization for an organization",
    "scope": "orgs",
    "id": "removeCredentialAuthorization",
    "method": "DELETE",
    "url": "/orgs/{org}/credential-authorizations/{credential_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "credential_id parameter",
        "enum": null,
        "name": "credential_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List public events for an organization",
    "scope": "activity",
    "id": "listPublicEventsForOrg",
    "method": "GET",
    "url": "/orgs/{org}/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List hooks",
    "scope": "orgs",
    "id": "listHooks",
    "method": "GET",
    "url": "/orgs/{org}/hooks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a hook",
    "scope": "orgs",
    "id": "createHook",
    "method": "POST",
    "url": "/orgs/{org}/hooks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Must be passed as \"web\".",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).",
        "enum": null,
        "name": "config",
        "type": "object",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL to which the payloads will be delivered.",
        "enum": null,
        "name": "config.url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "enum": null,
        "name": "config.content_type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "enum": null,
        "name": "config.secret",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "enum": null,
        "name": "config.insecure_ssl",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
        "enum": null,
        "name": "events",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "enum": null,
        "name": "active",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get single hook",
    "scope": "orgs",
    "id": "getHook",
    "method": "GET",
    "url": "/orgs/{org}/hooks/{hook_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a hook",
    "scope": "orgs",
    "id": "updateHook",
    "method": "PATCH",
    "url": "/orgs/{org}/hooks/{hook_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).",
        "enum": null,
        "name": "config",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL to which the payloads will be delivered.",
        "enum": null,
        "name": "config.url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "enum": null,
        "name": "config.content_type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "enum": null,
        "name": "config.secret",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "enum": null,
        "name": "config.insecure_ssl",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
        "enum": null,
        "name": "events",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "enum": null,
        "name": "active",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a hook",
    "scope": "orgs",
    "id": "deleteHook",
    "method": "DELETE",
    "url": "/orgs/{org}/hooks/{hook_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Ping a hook",
    "scope": "orgs",
    "id": "pingHook",
    "method": "POST",
    "url": "/orgs/{org}/hooks/{hook_id}/pings",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Get an organization installation",
    "scope": "apps",
    "id": "getOrgInstallation",
    "method": "GET",
    "url": "/orgs/{org}/installation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get an organization installation",
    "scope": "apps",
    "id": "findOrgInstallation",
    "method": "GET",
    "url": "/orgs/{org}/installation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get interaction restrictions for an organization",
    "scope": "interactions",
    "id": "getRestrictionsForOrg",
    "method": "GET",
    "url": "/orgs/{org}/interaction-limits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add or update interaction restrictions for an organization",
    "scope": "interactions",
    "id": "addOrUpdateRestrictionsForOrg",
    "method": "PUT",
    "url": "/orgs/{org}/interaction-limits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
        "enum": ["existing_users", "contributors_only", "collaborators_only"],
        "name": "limit",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove interaction restrictions for an organization",
    "scope": "interactions",
    "id": "removeRestrictionsForOrg",
    "method": "DELETE",
    "url": "/orgs/{org}/interaction-limits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List pending organization invitations",
    "scope": "orgs",
    "id": "listPendingInvitations",
    "method": "GET",
    "url": "/orgs/{org}/invitations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create organization invitation",
    "scope": "orgs",
    "id": "createInvitation",
    "method": "POST",
    "url": "/orgs/{org}/invitations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting.",
        "enum": null,
        "name": "invitee_id",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.",
        "enum": null,
        "name": "email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify role for new member. Can be one of:  \n\\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.",
        "enum": ["admin", "direct_member", "billing_manager"],
        "name": "role",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify IDs for the teams you want to invite new members to.",
        "enum": null,
        "name": "team_ids",
        "type": "integer[]",
        "required": false
      }
    ]
  },
  {
    "name": "List organization invitation teams",
    "scope": "orgs",
    "id": "listInvitationTeams",
    "method": "GET",
    "url": "/orgs/{org}/invitations/{invitation_id}/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "invitation_id parameter",
        "enum": null,
        "name": "invitation_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all issues for a given organization assigned to the authenticated user",
    "scope": "issues",
    "id": "listForOrg",
    "method": "GET",
    "url": "/orgs/{org}/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
        "enum": ["assigned", "created", "mentioned", "subscribed", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "enum": null,
        "name": "labels",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
        "enum": ["created", "updated", "comments"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The direction of the sort. Can be either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Members list",
    "scope": "orgs",
    "id": "listMembers",
    "method": "GET",
    "url": "/orgs/{org}/members",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` - All members the authenticated user can see.",
        "enum": ["2fa_disabled", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter members returned by their role. Can be one of:  \n\\* `all` - All members of the organization, regardless of role.  \n\\* `admin` - Organization owners.  \n\\* `member` - Non-owner organization members.",
        "enum": ["all", "admin", "member"],
        "name": "role",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check membership",
    "scope": "orgs",
    "id": "checkMembership",
    "method": "GET",
    "url": "/orgs/{org}/members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove a member",
    "scope": "orgs",
    "id": "removeMember",
    "method": "DELETE",
    "url": "/orgs/{org}/members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get organization membership",
    "scope": "orgs",
    "id": "getMembership",
    "method": "GET",
    "url": "/orgs/{org}/memberships/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add or update organization membership",
    "scope": "orgs",
    "id": "addOrUpdateMembership",
    "method": "PUT",
    "url": "/orgs/{org}/memberships/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.",
        "enum": ["admin", "member"],
        "name": "role",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Remove organization membership",
    "scope": "orgs",
    "id": "removeMembership",
    "method": "DELETE",
    "url": "/orgs/{org}/memberships/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Start an organization migration",
    "scope": "migrations",
    "id": "startForOrg",
    "method": "POST",
    "url": "/orgs/{org}/migrations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of arrays indicating which repositories should be migrated.",
        "enum": null,
        "name": "repositories",
        "type": "string[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
        "enum": null,
        "name": "lock_repositories",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
        "enum": null,
        "name": "exclude_attachments",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a list of organization migrations",
    "scope": "migrations",
    "id": "listForOrg",
    "method": "GET",
    "url": "/orgs/{org}/migrations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get the status of an organization migration",
    "scope": "migrations",
    "id": "getStatusForOrg",
    "method": "GET",
    "url": "/orgs/{org}/migrations/{migration_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Download an organization migration archive",
    "scope": "migrations",
    "id": "getArchiveForOrg",
    "method": "GET",
    "url": "/orgs/{org}/migrations/{migration_id}/archive",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete an organization migration archive",
    "scope": "migrations",
    "id": "deleteArchiveForOrg",
    "method": "DELETE",
    "url": "/orgs/{org}/migrations/{migration_id}/archive",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Unlock an organization repository",
    "scope": "migrations",
    "id": "unlockRepoForOrg",
    "method": "DELETE",
    "url": "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo_name parameter",
        "enum": null,
        "name": "repo_name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List outside collaborators",
    "scope": "orgs",
    "id": "listOutsideCollaborators",
    "method": "GET",
    "url": "/orgs/{org}/outside_collaborators",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
        "enum": ["2fa_disabled", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Remove outside collaborator",
    "scope": "orgs",
    "id": "removeOutsideCollaborator",
    "method": "DELETE",
    "url": "/orgs/{org}/outside_collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Convert member to outside collaborator",
    "scope": "orgs",
    "id": "convertMemberToOutsideCollaborator",
    "method": "PUT",
    "url": "/orgs/{org}/outside_collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List organization projects",
    "scope": "projects",
    "id": "listForOrg",
    "method": "GET",
    "url": "/orgs/{org}/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create an organization project",
    "scope": "projects",
    "id": "createForOrg",
    "method": "POST",
    "url": "/orgs/{org}/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the project.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the project.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Public members list",
    "scope": "orgs",
    "id": "listPublicMembers",
    "method": "GET",
    "url": "/orgs/{org}/public_members",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check public membership",
    "scope": "orgs",
    "id": "checkPublicMembership",
    "method": "GET",
    "url": "/orgs/{org}/public_members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Publicize a user's membership",
    "scope": "orgs",
    "id": "publicizeMembership",
    "method": "PUT",
    "url": "/orgs/{org}/public_members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Conceal a user's membership",
    "scope": "orgs",
    "id": "concealMembership",
    "method": "DELETE",
    "url": "/orgs/{org}/public_members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List organization repositories",
    "scope": "repos",
    "id": "listForOrg",
    "method": "GET",
    "url": "/orgs/{org}/repos",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`.",
        "enum": ["all", "public", "private", "forks", "sources", "member"],
        "name": "type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "enum": ["created", "updated", "pushed", "full_name"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Creates a new repository in the specified organization",
    "scope": "repos",
    "id": "createInOrg",
    "method": "POST",
    "url": "/orgs/{org}/repos",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the repository.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the repository.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL with more information about the repository.",
        "enum": null,
        "name": "homepage",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
        "enum": null,
        "name": "private",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "enum": null,
        "name": "has_issues",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "enum": null,
        "name": "has_projects",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "enum": null,
        "name": "has_wiki",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
        "enum": null,
        "name": "is_template",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Pass `true` to create an initial commit with empty README.",
        "enum": null,
        "name": "auto_init",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
        "enum": null,
        "name": "gitignore_template",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
        "enum": null,
        "name": "license_template",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "enum": null,
        "name": "allow_squash_merge",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "enum": null,
        "name": "allow_merge_commit",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "enum": null,
        "name": "allow_rebase_merge",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "List IdP groups in an organization",
    "scope": "teams",
    "id": "listIdPGroupsForOrg",
    "method": "GET",
    "url": "/orgs/{org}/team-sync/groups",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List teams",
    "scope": "teams",
    "id": "list",
    "method": "GET",
    "url": "/orgs/{org}/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create team",
    "scope": "teams",
    "id": "create",
    "method": "POST",
    "url": "/orgs/{org}/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the team.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the team.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The logins of organization members to add as maintainers of the team.",
        "enum": null,
        "name": "maintainers",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
        "enum": null,
        "name": "repo_names",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`  \n**Note**: You must pass the `hellcat-preview` media type to set privacy default to `closed` for child teams.",
        "enum": ["secret", "closed"],
        "name": "privacy",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
        "enum": ["pull", "push", "admin"],
        "name": "permission",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.",
        "enum": null,
        "name": "parent_team_id",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get team by name",
    "scope": "teams",
    "id": "getByName",
    "method": "GET",
    "url": "/orgs/{org}/teams/{team_slug}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_slug parameter",
        "enum": null,
        "name": "team_slug",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a project card",
    "scope": "projects",
    "id": "getCard",
    "method": "GET",
    "url": "/projects/columns/cards/{card_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "card_id parameter",
        "enum": null,
        "name": "card_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Update a project card",
    "scope": "projects",
    "id": "updateCard",
    "method": "PATCH",
    "url": "/projects/columns/cards/{card_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "card_id parameter",
        "enum": null,
        "name": "card_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The card's note content. Only valid for cards without another type of content, so this cannot be specified if the card already has a `content_id` and `content_type`.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Use `true` to archive a project card. Specify `false` if you need to restore a previously archived project card.",
        "enum": null,
        "name": "archived",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a project card",
    "scope": "projects",
    "id": "deleteCard",
    "method": "DELETE",
    "url": "/projects/columns/cards/{card_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "card_id parameter",
        "enum": null,
        "name": "card_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Move a project card",
    "scope": "projects",
    "id": "moveCard",
    "method": "POST",
    "url": "/projects/columns/cards/{card_id}/moves",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "card_id parameter",
        "enum": null,
        "name": "card_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `top`, `bottom`, or `after:<card_id>`, where `<card_id>` is the `id` value of a card in the same column, or in the new column specified by `column_id`.",
        "enum": null,
        "name": "position",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The `id` value of a column in the same project.",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a project column",
    "scope": "projects",
    "id": "getColumn",
    "method": "GET",
    "url": "/projects/columns/{column_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "column_id parameter",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Update a project column",
    "scope": "projects",
    "id": "updateColumn",
    "method": "PATCH",
    "url": "/projects/columns/{column_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "column_id parameter",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new name of the column.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a project column",
    "scope": "projects",
    "id": "deleteColumn",
    "method": "DELETE",
    "url": "/projects/columns/{column_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "column_id parameter",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List project cards",
    "scope": "projects",
    "id": "listCards",
    "method": "GET",
    "url": "/projects/columns/{column_id}/cards",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "column_id parameter",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.",
        "enum": ["all", "archived", "not_archived"],
        "name": "archived_state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a project card",
    "scope": "projects",
    "id": "createCard",
    "method": "POST",
    "url": "/projects/columns/{column_id}/cards",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "column_id parameter",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The card's note content. Only valid for cards without another type of content, so you must omit when specifying `content_id` and `content_type`.",
        "enum": null,
        "name": "note",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The issue or pull request id you want to associate with this card. You can use the [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository) and [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoints to find this id.  \n**Note:** Depending on whether you use the issue id or pull request id, you will need to specify `Issue` or `PullRequest` as the `content_type`.",
        "enum": null,
        "name": "content_id",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required if you provide `content_id`**. The type of content you want to associate with this card. Use `Issue` when `content_id` is an issue id and use `PullRequest` when `content_id` is a pull request id.",
        "enum": null,
        "name": "content_type",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Move a project column",
    "scope": "projects",
    "id": "moveColumn",
    "method": "POST",
    "url": "/projects/columns/{column_id}/moves",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "column_id parameter",
        "enum": null,
        "name": "column_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `first`, `last`, or `after:<column_id>`, where `<column_id>` is the `id` value of a column in the same project.",
        "enum": null,
        "name": "position",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a project",
    "scope": "projects",
    "id": "get",
    "method": "GET",
    "url": "/projects/{project_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Update a project",
    "scope": "projects",
    "id": "update",
    "method": "PATCH",
    "url": "/projects/{project_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the project.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the project.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "State of the project. Either `open` or `closed`.",
        "enum": ["open", "closed"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permission level that determines whether all members of the project's organization can see and/or make changes to the project. Setting `organization_permission` is only available for organization projects. If an organization member belongs to a team with a higher level of access or is a collaborator with a higher level of access, their permission level is not lowered by `organization_permission`. For information on changing access for a team or collaborator, see [Add or update team project](https://developer.github.com/v3/teams/#add-or-update-team-project) or [Add user as a collaborator](https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator).  \n  \n**Note:** Updating a project's `organization_permission` requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `read` - Organization members can read, but not write to or administer this project.  \n\\* `write` - Organization members can read and write, but not administer this project.  \n\\* `admin` - Organization members can read, write and administer this project.  \n\\* `none` - Organization members can only see this project if it is public.",
        "enum": null,
        "name": "organization_permission",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sets the visibility of a project board. Setting `private` is only available for organization and user projects. **Note:** Updating a project's visibility requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `false` - Anyone can see the project.  \n\\* `true` - Only the user can view a project board created on a user account. Organization members with the appropriate `organization_permission` can see project boards in an organization account.",
        "enum": null,
        "name": "private",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a project",
    "scope": "projects",
    "id": "delete",
    "method": "DELETE",
    "url": "/projects/{project_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List collaborators",
    "scope": "projects",
    "id": "listCollaborators",
    "method": "GET",
    "url": "/projects/{project_id}/collaborators",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters the collaborators by their affiliation. Can be one of:  \n\\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  \n\\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
        "enum": ["outside", "direct", "all"],
        "name": "affiliation",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Add user as a collaborator",
    "scope": "projects",
    "id": "addCollaborator",
    "method": "PUT",
    "url": "/projects/{project_id}/collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permission to grant the collaborator. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\" Can be one of:  \n\\* `read` - can read, but not write to or administer this project.  \n\\* `write` - can read and write, but not administer this project.  \n\\* `admin` - can read, write and administer this project.",
        "enum": ["read", "write", "admin"],
        "name": "permission",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Remove user as a collaborator",
    "scope": "projects",
    "id": "removeCollaborator",
    "method": "DELETE",
    "url": "/projects/{project_id}/collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Review a user's permission level",
    "scope": "projects",
    "id": "reviewUserPermissionLevel",
    "method": "GET",
    "url": "/projects/{project_id}/collaborators/{username}/permission",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List project columns",
    "scope": "projects",
    "id": "listColumns",
    "method": "GET",
    "url": "/projects/{project_id}/columns",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a project column",
    "scope": "projects",
    "id": "createColumn",
    "method": "POST",
    "url": "/projects/{project_id}/columns",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the column.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get your current rate limit status",
    "scope": "rateLimit",
    "id": "get",
    "method": "GET",
    "url": "/rate_limit",
    "parameters": []
  },
  {
    "name": "Delete a reaction",
    "scope": "reactions",
    "id": "delete",
    "method": "DELETE",
    "url": "/reactions/{reaction_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "reaction_id parameter",
        "enum": null,
        "name": "reaction_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Get",
    "scope": "repos",
    "id": "get",
    "method": "GET",
    "url": "/repos/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Edit",
    "scope": "repos",
    "id": "update",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the repository.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the repository.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL with more information about the repository.",
        "enum": null,
        "name": "homepage",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to make the repository private or `false` to make it public. Creating private repositories requires a paid GitHub account. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
        "enum": null,
        "name": "private",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "enum": null,
        "name": "has_issues",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "enum": null,
        "name": "has_projects",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "enum": null,
        "name": "has_wiki",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
        "enum": null,
        "name": "is_template",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Updates the default branch for this repository.",
        "enum": null,
        "name": "default_branch",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "enum": null,
        "name": "allow_squash_merge",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "enum": null,
        "name": "allow_merge_commit",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "enum": null,
        "name": "allow_rebase_merge",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
        "enum": null,
        "name": "archived",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a repository",
    "scope": "repos",
    "id": "delete",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List assignees",
    "scope": "issues",
    "id": "listAssignees",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/assignees",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check assignee",
    "scope": "issues",
    "id": "checkAssignee",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/assignees/{assignee}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "assignee parameter",
        "enum": null,
        "name": "assignee",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Enable automated security fixes",
    "scope": "repos",
    "id": "enableAutomatedSecurityFixes",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/automated-security-fixes",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Disable automated security fixes",
    "scope": "repos",
    "id": "disableAutomatedSecurityFixes",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/automated-security-fixes",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List branches",
    "scope": "repos",
    "id": "listBranches",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
        "enum": null,
        "name": "protected",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get branch",
    "scope": "repos",
    "id": "getBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get branch protection",
    "scope": "repos",
    "id": "getBranchProtection",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update branch protection",
    "scope": "repos",
    "id": "updateBranchProtection",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": true,
        "deprecated": null,
        "description": "Require status checks to pass before merging. Set to `null` to disable.",
        "enum": null,
        "name": "required_status_checks",
        "type": "object",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Require branches to be up to date before merging.",
        "enum": null,
        "name": "required_status_checks.strict",
        "type": "boolean",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of status checks to require in order to merge into this branch",
        "enum": null,
        "name": "required_status_checks.contexts",
        "type": "string[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": true,
        "deprecated": null,
        "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
        "enum": null,
        "name": "enforce_admins",
        "type": "boolean",
        "required": true
      },
      {
        "alias": null,
        "allowNull": true,
        "deprecated": null,
        "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
        "enum": null,
        "name": "required_pull_request_reviews",
        "type": "object",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
        "enum": null,
        "name": "required_pull_request_reviews.dismissal_restrictions",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of user `login`s with dismissal access",
        "enum": null,
        "name": "required_pull_request_reviews.dismissal_restrictions.users",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of team `slug`s with dismissal access",
        "enum": null,
        "name": "required_pull_request_reviews.dismissal_restrictions.teams",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
        "enum": null,
        "name": "required_pull_request_reviews.dismiss_stale_reviews",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.",
        "enum": null,
        "name": "required_pull_request_reviews.require_code_owner_reviews",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
        "enum": null,
        "name": "required_pull_request_reviews.required_approving_review_count",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": true,
        "deprecated": null,
        "description": "Restrict who can push to this branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
        "enum": null,
        "name": "restrictions",
        "type": "object",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of user `login`s with push access",
        "enum": null,
        "name": "restrictions.users",
        "type": "string[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of team `slug`s with push access",
        "enum": null,
        "name": "restrictions.teams",
        "type": "string[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of app `slug`s with push access",
        "enum": null,
        "name": "restrictions.apps",
        "type": "string[]",
        "required": false
      }
    ]
  },
  {
    "name": "Remove branch protection",
    "scope": "repos",
    "id": "removeBranchProtection",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get admin enforcement of protected branch",
    "scope": "repos",
    "id": "getProtectedBranchAdminEnforcement",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add admin enforcement of protected branch",
    "scope": "repos",
    "id": "addProtectedBranchAdminEnforcement",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove admin enforcement of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchAdminEnforcement",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get pull request review enforcement of protected branch",
    "scope": "repos",
    "id": "getProtectedBranchPullRequestReviewEnforcement",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update pull request review enforcement of protected branch",
    "scope": "repos",
    "id": "updateProtectedBranchPullRequestReviewEnforcement",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
        "enum": null,
        "name": "dismissal_restrictions",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of user `login`s with dismissal access",
        "enum": null,
        "name": "dismissal_restrictions.users",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of team `slug`s with dismissal access",
        "enum": null,
        "name": "dismissal_restrictions.teams",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
        "enum": null,
        "name": "dismiss_stale_reviews",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.",
        "enum": null,
        "name": "require_code_owner_reviews",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
        "enum": null,
        "name": "required_approving_review_count",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Remove pull request review enforcement of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchPullRequestReviewEnforcement",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get required signatures of protected branch",
    "scope": "repos",
    "id": "getProtectedBranchRequiredSignatures",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add required signatures of protected branch",
    "scope": "repos",
    "id": "addProtectedBranchRequiredSignatures",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove required signatures of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchRequiredSignatures",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get required status checks of protected branch",
    "scope": "repos",
    "id": "getProtectedBranchRequiredStatusChecks",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update required status checks of protected branch",
    "scope": "repos",
    "id": "updateProtectedBranchRequiredStatusChecks",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Require branches to be up to date before merging.",
        "enum": null,
        "name": "strict",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The list of status checks to require in order to merge into this branch",
        "enum": null,
        "name": "contexts",
        "type": "string[]",
        "required": false
      }
    ]
  },
  {
    "name": "Remove required status checks of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchRequiredStatusChecks",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List required status checks contexts of protected branch",
    "scope": "repos",
    "id": "listProtectedBranchRequiredStatusChecksContexts",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Replace required status checks contexts of protected branch",
    "scope": "repos",
    "id": "replaceProtectedBranchRequiredStatusChecksContexts",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "contexts parameter",
        "enum": null,
        "name": "contexts",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Add required status checks contexts of protected branch",
    "scope": "repos",
    "id": "addProtectedBranchRequiredStatusChecksContexts",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "contexts parameter",
        "enum": null,
        "name": "contexts",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Remove required status checks contexts of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchRequiredStatusChecksContexts",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "contexts parameter",
        "enum": null,
        "name": "contexts",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Get restrictions of protected branch",
    "scope": "repos",
    "id": "getProtectedBranchRestrictions",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove restrictions of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchRestrictions",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get apps with access to protected branch",
    "scope": "repos",
    "id": "getAppsWithAccessToProtectedBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get apps with access to protected branch",
    "scope": "repos",
    "id": "listAppsWithAccessToProtectedBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Replace app restrictions of protected branch",
    "scope": "repos",
    "id": "replaceProtectedBranchAppRestrictions",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "apps parameter",
        "enum": null,
        "name": "apps",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Add app restrictions of protected branch",
    "scope": "repos",
    "id": "addProtectedBranchAppRestrictions",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "apps parameter",
        "enum": null,
        "name": "apps",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Remove app restrictions of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchAppRestrictions",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "apps parameter",
        "enum": null,
        "name": "apps",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Get teams with access to protected branch",
    "scope": "repos",
    "id": "getTeamsWithAccessToProtectedBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get teams with access to protected branch",
    "scope": "repos",
    "id": "listProtectedBranchTeamRestrictions",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get teams with access to protected branch",
    "scope": "repos",
    "id": "listTeamsWithAccessToProtectedBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Replace team restrictions of protected branch",
    "scope": "repos",
    "id": "replaceProtectedBranchTeamRestrictions",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "teams parameter",
        "enum": null,
        "name": "teams",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Add team restrictions of protected branch",
    "scope": "repos",
    "id": "addProtectedBranchTeamRestrictions",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "teams parameter",
        "enum": null,
        "name": "teams",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Remove team restrictions of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchTeamRestrictions",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "teams parameter",
        "enum": null,
        "name": "teams",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Get users with access to protected branch",
    "scope": "repos",
    "id": "getUsersWithAccessToProtectedBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get users with access to protected branch",
    "scope": "repos",
    "id": "listProtectedBranchUserRestrictions",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get users with access to protected branch",
    "scope": "repos",
    "id": "listUsersWithAccessToProtectedBranch",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Replace user restrictions of protected branch",
    "scope": "repos",
    "id": "replaceProtectedBranchUserRestrictions",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "users parameter",
        "enum": null,
        "name": "users",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Add user restrictions of protected branch",
    "scope": "repos",
    "id": "addProtectedBranchUserRestrictions",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "users parameter",
        "enum": null,
        "name": "users",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Remove user restrictions of protected branch",
    "scope": "repos",
    "id": "removeProtectedBranchUserRestrictions",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "branch parameter",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "users parameter",
        "enum": null,
        "name": "users",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Create a check run",
    "scope": "checks",
    "id": "create",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/check-runs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the check. For example, \"code-coverage\".",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA of the commit.",
        "enum": null,
        "name": "head_sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL of the integrator's site that has the full details of the check.",
        "enum": null,
        "name": "details_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A reference for the run on the integrator's system.",
        "enum": null,
        "name": "external_id",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
        "enum": ["queued", "in_progress", "completed"],
        "name": "status",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "started_at",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`.",
        "enum": [
          "success",
          "failure",
          "neutral",
          "cancelled",
          "timed_out",
          "action_required"
        ],
        "name": "conclusion",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "completed_at",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object) description.",
        "enum": null,
        "name": "output",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the check run.",
        "enum": null,
        "name": "output.title",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The summary of the check run. This parameter supports Markdown.",
        "enum": null,
        "name": "output.summary",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The details of the check run. This parameter supports Markdown.",
        "enum": null,
        "name": "output.text",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object) description for details about how to use this parameter.",
        "enum": null,
        "name": "output.annotations",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
        "enum": null,
        "name": "output.annotations[].path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The start line of the annotation.",
        "enum": null,
        "name": "output.annotations[].start_line",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The end line of the annotation.",
        "enum": null,
        "name": "output.annotations[].end_line",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
        "enum": null,
        "name": "output.annotations[].start_column",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
        "enum": null,
        "name": "output.annotations[].end_column",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
        "enum": ["notice", "warning", "failure"],
        "name": "output.annotations[].annotation_level",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
        "enum": null,
        "name": "output.annotations[].message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title that represents the annotation. The maximum size is 255 characters.",
        "enum": null,
        "name": "output.annotations[].title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Details about this annotation. The maximum size is 64 KB.",
        "enum": null,
        "name": "output.annotations[].raw_details",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#images-object) description for details.",
        "enum": null,
        "name": "output.images",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The alternative text for the image.",
        "enum": null,
        "name": "output.images[].alt",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The full URL of the image.",
        "enum": null,
        "name": "output.images[].image_url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short image description.",
        "enum": null,
        "name": "output.images[].caption",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://developer.github.com/v3/activity/events/types/#checkrunevent) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\" To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
        "enum": null,
        "name": "actions",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
        "enum": null,
        "name": "actions[].label",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short explanation of what this action would do. The maximum size is 40 characters.",
        "enum": null,
        "name": "actions[].description",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
        "enum": null,
        "name": "actions[].identifier",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update a check run",
    "scope": "checks",
    "id": "update",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "check_run_id parameter",
        "enum": null,
        "name": "check_run_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the check. For example, \"code-coverage\".",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL of the integrator's site that has the full details of the check.",
        "enum": null,
        "name": "details_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A reference for the run on the integrator's system.",
        "enum": null,
        "name": "external_id",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "started_at",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
        "enum": ["queued", "in_progress", "completed"],
        "name": "status",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `timed_out`, or `action_required`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`.",
        "enum": [
          "success",
          "failure",
          "neutral",
          "cancelled",
          "timed_out",
          "action_required"
        ],
        "name": "conclusion",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "completed_at",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object-1) description.",
        "enum": null,
        "name": "output",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required**.",
        "enum": null,
        "name": "output.title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can contain Markdown.",
        "enum": null,
        "name": "output.summary",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can contain Markdown.",
        "enum": null,
        "name": "output.text",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
        "enum": null,
        "name": "output.annotations",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
        "enum": null,
        "name": "output.annotations[].path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The start line of the annotation.",
        "enum": null,
        "name": "output.annotations[].start_line",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The end line of the annotation.",
        "enum": null,
        "name": "output.annotations[].end_line",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
        "enum": null,
        "name": "output.annotations[].start_column",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
        "enum": null,
        "name": "output.annotations[].end_column",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
        "enum": ["notice", "warning", "failure"],
        "name": "output.annotations[].annotation_level",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
        "enum": null,
        "name": "output.annotations[].message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title that represents the annotation. The maximum size is 255 characters.",
        "enum": null,
        "name": "output.annotations[].title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Details about this annotation. The maximum size is 64 KB.",
        "enum": null,
        "name": "output.annotations[].raw_details",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
        "enum": null,
        "name": "output.images",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The alternative text for the image.",
        "enum": null,
        "name": "output.images[].alt",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The full URL of the image.",
        "enum": null,
        "name": "output.images[].image_url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short image description.",
        "enum": null,
        "name": "output.images[].caption",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
        "enum": null,
        "name": "actions",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
        "enum": null,
        "name": "actions[].label",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short explanation of what this action would do. The maximum size is 40 characters.",
        "enum": null,
        "name": "actions[].description",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
        "enum": null,
        "name": "actions[].identifier",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single check run",
    "scope": "checks",
    "id": "get",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "check_run_id parameter",
        "enum": null,
        "name": "check_run_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List annotations for a check run",
    "scope": "checks",
    "id": "listAnnotations",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "check_run_id parameter",
        "enum": null,
        "name": "check_run_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a check suite",
    "scope": "checks",
    "id": "createSuite",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/check-suites",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The sha of the head commit.",
        "enum": null,
        "name": "head_sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Set preferences for check suites on a repository",
    "scope": "checks",
    "id": "setSuitesPreferences",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/check-suites/preferences",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object) description for details.",
        "enum": null,
        "name": "auto_trigger_checks",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The `id` of the GitHub App.",
        "enum": null,
        "name": "auto_trigger_checks[].app_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
        "enum": null,
        "name": "auto_trigger_checks[].setting",
        "type": "boolean",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single check suite",
    "scope": "checks",
    "id": "getSuite",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "check_suite_id parameter",
        "enum": null,
        "name": "check_suite_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List check runs in a check suite",
    "scope": "checks",
    "id": "listForSuite",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "check_suite_id parameter",
        "enum": null,
        "name": "check_suite_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns check runs with the specified `name`.",
        "enum": null,
        "name": "check_name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
        "enum": ["queued", "in_progress", "completed"],
        "name": "status",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
        "enum": ["latest", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Rerequest check suite",
    "scope": "checks",
    "id": "rerequestSuite",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "check_suite_id parameter",
        "enum": null,
        "name": "check_suite_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List collaborators",
    "scope": "repos",
    "id": "listCollaborators",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/collaborators",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
        "enum": ["outside", "direct", "all"],
        "name": "affiliation",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if a user is a collaborator",
    "scope": "repos",
    "id": "checkCollaborator",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add user as a collaborator",
    "scope": "repos",
    "id": "addCollaborator",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.",
        "enum": ["pull", "push", "admin"],
        "name": "permission",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Remove user as a collaborator",
    "scope": "repos",
    "id": "removeCollaborator",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/collaborators/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Review a user's permission level",
    "scope": "repos",
    "id": "getCollaboratorPermissionLevel",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/collaborators/{username}/permission",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List commit comments for a repository",
    "scope": "repos",
    "id": "listCommitComments",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single commit comment",
    "scope": "repos",
    "id": "getCommitComment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Update a commit comment",
    "scope": "repos",
    "id": "updateCommitComment",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the comment",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a commit comment",
    "scope": "repos",
    "id": "deleteCommitComment",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List reactions for a commit comment",
    "scope": "reactions",
    "id": "listForCommitComment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create reaction for a commit comment",
    "scope": "reactions",
    "id": "createForCommitComment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List commits on a repository",
    "scope": "repos",
    "id": "listCommits",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only commits containing this file path will be returned.",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "GitHub login or email address by which to filter by commit author.",
        "enum": null,
        "name": "author",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only commits after this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "until",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List branches for HEAD commit",
    "scope": "repos",
    "id": "listBranchesForHeadCommit",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "commit_sha parameter",
        "enum": null,
        "name": "commit_sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List comments for a single commit",
    "scope": "repos",
    "id": "listCommentsForCommit",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "commit_sha parameter",
        "enum": null,
        "name": "commit_sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "commit_sha",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "ref",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Create a commit comment",
    "scope": "repos",
    "id": "createCommitComment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "commit_sha parameter",
        "enum": null,
        "name": "commit_sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Relative path of the file to comment on.",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Line index in the diff to comment on.",
        "enum": null,
        "name": "position",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
        "enum": null,
        "name": "line",
        "type": "integer",
        "required": false
      },
      {
        "alias": "commit_sha",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "sha",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List pull requests associated with commit",
    "scope": "repos",
    "id": "listPullRequestsAssociatedWithCommit",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "commit_sha parameter",
        "enum": null,
        "name": "commit_sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single commit",
    "scope": "repos",
    "id": "getCommit",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{ref}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": "ref",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "sha",
        "type": null,
        "required": null
      },
      {
        "alias": "ref",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "commit_sha",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List check runs for a specific ref",
    "scope": "checks",
    "id": "listForRef",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{ref}/check-runs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns check runs with the specified `name`.",
        "enum": null,
        "name": "check_name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
        "enum": ["queued", "in_progress", "completed"],
        "name": "status",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
        "enum": ["latest", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List check suites for a specific ref",
    "scope": "checks",
    "id": "listSuitesForRef",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{ref}/check-suites",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters check suites by GitHub App `id`.",
        "enum": null,
        "name": "app_id",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/).",
        "enum": null,
        "name": "check_name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get the combined status for a specific ref",
    "scope": "repos",
    "id": "getCombinedStatusForRef",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{ref}/status",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List statuses for a specific ref",
    "scope": "repos",
    "id": "listStatusesForRef",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/commits/{ref}/statuses",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get the contents of a repository's code of conduct",
    "scope": "codesOfConduct",
    "id": "getForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/community/code_of_conduct",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Retrieve community profile metrics",
    "scope": "repos",
    "id": "retrieveCommunityProfileMetrics",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/community/profile",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Compare two commits",
    "scope": "repos",
    "id": "compareCommits",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/compare/{base}...{head}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "base parameter",
        "enum": null,
        "name": "base",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "head parameter",
        "enum": null,
        "name": "head",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get contents",
    "scope": "repos",
    "id": "getContents",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/contents/{path}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "path parameter",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Create or update a file",
    "scope": "repos",
    "id": "createOrUpdateFile",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/contents/{path}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "path parameter",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The commit message.",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new file content, using Base64 encoding.",
        "enum": null,
        "name": "content",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required if you are updating a file**. The blob SHA of the file being replaced.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The branch name. Default: the repository’s default branch (usually `master`)",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The person that committed the file. Default: the authenticated user.",
        "enum": null,
        "name": "committer",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "committer.name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "committer.email",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
        "enum": null,
        "name": "author",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "author.name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "author.email",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create or update a file",
    "scope": "repos",
    "id": "createFile",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/contents/{path}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "path parameter",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The commit message.",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new file content, using Base64 encoding.",
        "enum": null,
        "name": "content",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required if you are updating a file**. The blob SHA of the file being replaced.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The branch name. Default: the repository’s default branch (usually `master`)",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The person that committed the file. Default: the authenticated user.",
        "enum": null,
        "name": "committer",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "committer.name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "committer.email",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
        "enum": null,
        "name": "author",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "author.name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "author.email",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create or update a file",
    "scope": "repos",
    "id": "updateFile",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/contents/{path}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "path parameter",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The commit message.",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new file content, using Base64 encoding.",
        "enum": null,
        "name": "content",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required if you are updating a file**. The blob SHA of the file being replaced.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The branch name. Default: the repository’s default branch (usually `master`)",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The person that committed the file. Default: the authenticated user.",
        "enum": null,
        "name": "committer",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "committer.name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "committer.email",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
        "enum": null,
        "name": "author",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "author.name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
        "enum": null,
        "name": "author.email",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a file",
    "scope": "repos",
    "id": "deleteFile",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/contents/{path}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "path parameter",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The commit message.",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The blob SHA of the file being replaced.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The branch name. Default: the repository’s default branch (usually `master`)",
        "enum": null,
        "name": "branch",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "object containing information about the committer.",
        "enum": null,
        "name": "committer",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author (or committer) of the commit",
        "enum": null,
        "name": "committer.name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author (or committer) of the commit",
        "enum": null,
        "name": "committer.email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "object containing information about the author.",
        "enum": null,
        "name": "author",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author (or committer) of the commit",
        "enum": null,
        "name": "author.name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author (or committer) of the commit",
        "enum": null,
        "name": "author.email",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List contributors",
    "scope": "repos",
    "id": "listContributors",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/contributors",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Set to `1` or `true` to include anonymous contributors in results.",
        "enum": null,
        "name": "anon",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List deployments",
    "scope": "repos",
    "id": "listDeployments",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/deployments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA recorded at creation time.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the ref. This can be a branch, tag, or SHA.",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
        "enum": null,
        "name": "task",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
        "enum": null,
        "name": "environment",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a deployment",
    "scope": "repos",
    "id": "createDeployment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/deployments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The ref to deploy. This can be a branch, tag, or SHA.",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
        "enum": null,
        "name": "task",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
        "enum": null,
        "name": "auto_merge",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [status](https://developer.github.com/v3/repos/statuses/) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
        "enum": null,
        "name": "required_contexts",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "JSON payload with extra information about the deployment.",
        "enum": null,
        "name": "payload",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
        "enum": null,
        "name": "environment",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Short description of the deployment.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
        "enum": null,
        "name": "transient_environment",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
        "enum": null,
        "name": "production_environment",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single deployment",
    "scope": "repos",
    "id": "getDeployment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/deployments/{deployment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "deployment_id parameter",
        "enum": null,
        "name": "deployment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List deployment statuses",
    "scope": "repos",
    "id": "listDeploymentStatuses",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "deployment_id parameter",
        "enum": null,
        "name": "deployment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a deployment status",
    "scope": "repos",
    "id": "createDeploymentStatus",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "deployment_id parameter",
        "enum": null,
        "name": "deployment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
        "enum": [
          "error",
          "failure",
          "inactive",
          "in_progress",
          "queued",
          "pending",
          "success"
        ],
        "name": "state",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
        "enum": null,
        "name": "target_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
        "enum": null,
        "name": "log_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the status. The maximum description length is 140 characters.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
        "enum": ["production", "staging", "qa"],
        "name": "environment",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sets the URL for accessing your environment. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
        "enum": null,
        "name": "environment_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  \n**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
        "enum": null,
        "name": "auto_inactive",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single deployment status",
    "scope": "repos",
    "id": "getDeploymentStatus",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "deployment_id parameter",
        "enum": null,
        "name": "deployment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "status_id parameter",
        "enum": null,
        "name": "status_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Create a repository dispatch event",
    "scope": "repos",
    "id": "createDispatchEvent",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/dispatches",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required:** A custom webhook event name.",
        "enum": null,
        "name": "event_type",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List downloads for a repository",
    "scope": "repos",
    "id": "listDownloads",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/downloads",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single download",
    "scope": "repos",
    "id": "getDownload",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/downloads/{download_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "download_id parameter",
        "enum": null,
        "name": "download_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a download",
    "scope": "repos",
    "id": "deleteDownload",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/downloads/{download_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "download_id parameter",
        "enum": null,
        "name": "download_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List repository events",
    "scope": "activity",
    "id": "listRepoEvents",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List forks",
    "scope": "repos",
    "id": "listForks",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/forks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
        "enum": ["newest", "oldest", "stargazers"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a fork",
    "scope": "repos",
    "id": "createFork",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/forks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Optional parameter to specify the organization name if forking into an organization.",
        "enum": null,
        "name": "organization",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Create a blob",
    "scope": "git",
    "id": "createBlob",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/git/blobs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new blob's content.",
        "enum": null,
        "name": "content",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
        "enum": null,
        "name": "encoding",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a blob",
    "scope": "git",
    "id": "getBlob",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/git/blobs/{file_sha}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "file_sha parameter",
        "enum": null,
        "name": "file_sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create a commit",
    "scope": "git",
    "id": "createCommit",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/git/commits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The commit message",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA of the tree object this commit points to",
        "enum": null,
        "name": "tree",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
        "enum": null,
        "name": "parents",
        "type": "string[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
        "enum": null,
        "name": "author",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author (or committer) of the commit",
        "enum": null,
        "name": "author.name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author (or committer) of the commit",
        "enum": null,
        "name": "author.email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "author.date",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
        "enum": null,
        "name": "committer",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author (or committer) of the commit",
        "enum": null,
        "name": "committer.name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author (or committer) of the commit",
        "enum": null,
        "name": "committer.email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "committer.date",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
        "enum": null,
        "name": "signature",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a commit",
    "scope": "git",
    "id": "getCommit",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/git/commits/{commit_sha}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "commit_sha parameter",
        "enum": null,
        "name": "commit_sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List matching references",
    "scope": "git",
    "id": "listMatchingRefs",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/git/matching-refs/{ref}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single reference",
    "scope": "git",
    "id": "getRef",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/git/ref/{ref}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create a reference",
    "scope": "git",
    "id": "createRef",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/git/refs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA1 value for this reference.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update a reference",
    "scope": "git",
    "id": "updateRef",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/git/refs/{ref}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA1 value to set this reference to",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
        "enum": null,
        "name": "force",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a reference",
    "scope": "git",
    "id": "deleteRef",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/git/refs/{ref}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create a tag object",
    "scope": "git",
    "id": "createTag",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/git/tags",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
        "enum": null,
        "name": "tag",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The tag message.",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA of the git object this is tagging.",
        "enum": null,
        "name": "object",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
        "enum": ["commit", "tree", "blob"],
        "name": "type",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An object with information about the individual creating the tag.",
        "enum": null,
        "name": "tagger",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the author of the tag",
        "enum": null,
        "name": "tagger.name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The email of the author of the tag",
        "enum": null,
        "name": "tagger.email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "tagger.date",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a tag",
    "scope": "git",
    "id": "getTag",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/git/tags/{tag_sha}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "tag_sha parameter",
        "enum": null,
        "name": "tag_sha",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create a tree",
    "scope": "git",
    "id": "createTree",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/git/trees",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
        "enum": null,
        "name": "tree",
        "type": "object[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The file referenced in the tree.",
        "enum": null,
        "name": "tree[].path",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
        "enum": ["100644", "100755", "040000", "160000", "120000"],
        "name": "tree[].mode",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `blob`, `tree`, or `commit`.",
        "enum": ["blob", "tree", "commit"],
        "name": "tree[].type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
        "enum": null,
        "name": "tree[].sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
        "enum": null,
        "name": "tree[].content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
        "enum": null,
        "name": "base_tree",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a tree",
    "scope": "git",
    "id": "getTree",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/git/trees/{tree_sha}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "tree_sha parameter",
        "enum": null,
        "name": "tree_sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "recursive parameter",
        "enum": ["1"],
        "name": "recursive",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List hooks",
    "scope": "repos",
    "id": "listHooks",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/hooks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a hook",
    "scope": "repos",
    "id": "createHook",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/hooks",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).",
        "enum": null,
        "name": "config",
        "type": "object",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL to which the payloads will be delivered.",
        "enum": null,
        "name": "config.url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "enum": null,
        "name": "config.content_type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "enum": null,
        "name": "config.secret",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "enum": null,
        "name": "config.insecure_ssl",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for.",
        "enum": null,
        "name": "events",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "enum": null,
        "name": "active",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get single hook",
    "scope": "repos",
    "id": "getHook",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/hooks/{hook_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a hook",
    "scope": "repos",
    "id": "updateHook",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/hooks/{hook_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).",
        "enum": null,
        "name": "config",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL to which the payloads will be delivered.",
        "enum": null,
        "name": "config.url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
        "enum": null,
        "name": "config.content_type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/#delivery-headers) header.",
        "enum": null,
        "name": "config.secret",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
        "enum": null,
        "name": "config.insecure_ssl",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines what [events](https://developer.github.com/v3/activity/events/types/) the hook is triggered for. This replaces the entire array of events.",
        "enum": null,
        "name": "events",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
        "enum": null,
        "name": "add_events",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
        "enum": null,
        "name": "remove_events",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
        "enum": null,
        "name": "active",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a hook",
    "scope": "repos",
    "id": "deleteHook",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/hooks/{hook_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Ping a hook",
    "scope": "repos",
    "id": "pingHook",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/hooks/{hook_id}/pings",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Test a push hook",
    "scope": "repos",
    "id": "testPushHook",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/hooks/{hook_id}/tests",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "hook_id parameter",
        "enum": null,
        "name": "hook_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Start an import",
    "scope": "migrations",
    "id": "startImport",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/import",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The URL of the originating repository.",
        "enum": null,
        "name": "vcs_url",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
        "enum": ["subversion", "git", "mercurial", "tfvc"],
        "name": "vcs",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If authentication is required, the username to provide to `vcs_url`.",
        "enum": null,
        "name": "vcs_username",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If authentication is required, the password to provide to `vcs_url`.",
        "enum": null,
        "name": "vcs_password",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "For a tfvc import, the name of the project that is being imported.",
        "enum": null,
        "name": "tfvc_project",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get import progress",
    "scope": "migrations",
    "id": "getImportProgress",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/import",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update existing import",
    "scope": "migrations",
    "id": "updateImport",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/import",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The username to provide to the originating repository.",
        "enum": null,
        "name": "vcs_username",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The password to provide to the originating repository.",
        "enum": null,
        "name": "vcs_password",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Cancel an import",
    "scope": "migrations",
    "id": "cancelImport",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/import",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get commit authors",
    "scope": "migrations",
    "id": "getCommitAuthors",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/import/authors",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Map a commit author",
    "scope": "migrations",
    "id": "mapCommitAuthor",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/import/authors/{author_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "author_id parameter",
        "enum": null,
        "name": "author_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new Git author email.",
        "enum": null,
        "name": "email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new Git author name.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get large files",
    "scope": "migrations",
    "id": "getLargeFiles",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/import/large_files",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Set Git LFS preference",
    "scope": "migrations",
    "id": "setLfsPreference",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/import/lfs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).",
        "enum": ["opt_in", "opt_out"],
        "name": "use_lfs",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a repository installation",
    "scope": "apps",
    "id": "getRepoInstallation",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/installation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a repository installation",
    "scope": "apps",
    "id": "findRepoInstallation",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/installation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get interaction restrictions for a repository",
    "scope": "interactions",
    "id": "getRestrictionsForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/interaction-limits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add or update interaction restrictions for a repository",
    "scope": "interactions",
    "id": "addOrUpdateRestrictionsForRepo",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/interaction-limits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies the group of GitHub users who can comment, open issues, or create pull requests for the given repository. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
        "enum": ["existing_users", "contributors_only", "collaborators_only"],
        "name": "limit",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove interaction restrictions for a repository",
    "scope": "interactions",
    "id": "removeRestrictionsForRepo",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/interaction-limits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List invitations for a repository",
    "scope": "repos",
    "id": "listInvitations",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/invitations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a repository invitation",
    "scope": "repos",
    "id": "deleteInvitation",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/invitations/{invitation_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "invitation_id parameter",
        "enum": null,
        "name": "invitation_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Update a repository invitation",
    "scope": "repos",
    "id": "updateInvitation",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/invitations/{invitation_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "invitation_id parameter",
        "enum": null,
        "name": "invitation_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, and `admin`.",
        "enum": ["read", "write", "admin"],
        "name": "permissions",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List issues for a repository",
    "scope": "issues",
    "id": "listForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
        "enum": null,
        "name": "milestone",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
        "enum": null,
        "name": "assignee",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The user that created the issue.",
        "enum": null,
        "name": "creator",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A user that's mentioned in the issue.",
        "enum": null,
        "name": "mentioned",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "enum": null,
        "name": "labels",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
        "enum": ["created", "updated", "comments"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The direction of the sort. Can be either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create an issue",
    "scope": "issues",
    "id": "create",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the issue.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the issue.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
        "enum": null,
        "name": "assignee",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._",
        "enum": null,
        "name": "milestone",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
        "enum": null,
        "name": "labels",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
        "enum": null,
        "name": "assignees",
        "type": "string[]",
        "required": false
      }
    ]
  },
  {
    "name": "List comments in a repository",
    "scope": "issues",
    "id": "listCommentsForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `created` or `updated`.",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `asc` or `desc`. Ignored without the `sort` parameter.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single comment",
    "scope": "issues",
    "id": "getComment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Edit a comment",
    "scope": "issues",
    "id": "updateComment",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a comment",
    "scope": "issues",
    "id": "deleteComment",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List reactions for an issue comment",
    "scope": "reactions",
    "id": "listForIssueComment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create reaction for an issue comment",
    "scope": "reactions",
    "id": "createForIssueComment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List events for a repository",
    "scope": "issues",
    "id": "listEventsForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single event",
    "scope": "issues",
    "id": "getEvent",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/events/{event_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "event_id parameter",
        "enum": null,
        "name": "event_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single issue",
    "scope": "issues",
    "id": "get",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Edit an issue",
    "scope": "issues",
    "id": "update",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the issue.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the issue.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Login for the user that this issue should be assigned to. **This field is deprecated.**",
        "enum": null,
        "name": "assignee",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "State of the issue. Either `open` or `closed`.",
        "enum": ["open", "closed"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": true,
        "deprecated": null,
        "description": "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._",
        "enum": null,
        "name": "milestone",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
        "enum": null,
        "name": "labels",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
        "enum": null,
        "name": "assignees",
        "type": "string[]",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Add assignees to an issue",
    "scope": "issues",
    "id": "addAssignees",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
        "enum": null,
        "name": "assignees",
        "type": "string[]",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Remove assignees from an issue",
    "scope": "issues",
    "id": "removeAssignees",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
        "enum": null,
        "name": "assignees",
        "type": "string[]",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List comments on an issue",
    "scope": "issues",
    "id": "listComments",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Create a comment",
    "scope": "issues",
    "id": "createComment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List events for an issue",
    "scope": "issues",
    "id": "listEvents",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List labels on an issue",
    "scope": "issues",
    "id": "listLabelsOnIssue",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Add labels to an issue",
    "scope": "issues",
    "id": "addLabels",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
        "enum": null,
        "name": "labels",
        "type": "string[]",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Replace all labels for an issue",
    "scope": "issues",
    "id": "replaceLabels",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
        "enum": null,
        "name": "labels",
        "type": "string[]",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Remove all labels from an issue",
    "scope": "issues",
    "id": "removeLabels",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Remove a label from an issue",
    "scope": "issues",
    "id": "removeLabel",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "name parameter",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Lock an issue",
    "scope": "issues",
    "id": "lock",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
        "enum": ["off-topic", "too heated", "resolved", "spam"],
        "name": "lock_reason",
        "type": "string",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Unlock an issue",
    "scope": "issues",
    "id": "unlock",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List reactions for an issue",
    "scope": "reactions",
    "id": "listForIssue",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Create reaction for an issue",
    "scope": "reactions",
    "id": "createForIssue",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": true
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List events for an issue",
    "scope": "issues",
    "id": "listEventsForTimeline",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "issue_number parameter",
        "enum": null,
        "name": "issue_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "issue_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List deploy keys",
    "scope": "repos",
    "id": "listDeployKeys",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Add a new deploy key",
    "scope": "repos",
    "id": "addDeployKey",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A name for the key.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the key.",
        "enum": null,
        "name": "key",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/).\"",
        "enum": null,
        "name": "read_only",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a deploy key",
    "scope": "repos",
    "id": "getDeployKey",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/keys/{key_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "key_id parameter",
        "enum": null,
        "name": "key_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Remove a deploy key",
    "scope": "repos",
    "id": "removeDeployKey",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/keys/{key_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "key_id parameter",
        "enum": null,
        "name": "key_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List all labels for this repository",
    "scope": "issues",
    "id": "listLabelsForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a label",
    "scope": "issues",
    "id": "createLabel",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
        "enum": null,
        "name": "color",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the label.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single label",
    "scope": "issues",
    "id": "getLabel",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/labels/{name}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "name parameter",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update a label",
    "scope": "issues",
    "id": "updateLabel",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/labels/{name}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "name parameter",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/).",
        "enum": null,
        "name": "new_name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
        "enum": null,
        "name": "color",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the label.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a label",
    "scope": "issues",
    "id": "deleteLabel",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/labels/{name}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "name parameter",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List languages",
    "scope": "repos",
    "id": "listLanguages",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/languages",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get the contents of a repository's license",
    "scope": "licenses",
    "id": "getForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/license",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Perform a merge",
    "scope": "repos",
    "id": "merge",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/merges",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the base branch that the head will be merged into.",
        "enum": null,
        "name": "base",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The head to merge. This can be a branch name or a commit SHA1.",
        "enum": null,
        "name": "head",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Commit message to use for the merge commit. If omitted, a default message will be used.",
        "enum": null,
        "name": "commit_message",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List milestones for a repository",
    "scope": "issues",
    "id": "listMilestonesForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/milestones",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The state of the milestone. Either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "What to sort results by. Either `due_on` or `completeness`.",
        "enum": ["due_on", "completeness"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The direction of the sort. Either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a milestone",
    "scope": "issues",
    "id": "createMilestone",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/milestones",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the milestone.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The state of the milestone. Either `open` or `closed`.",
        "enum": ["open", "closed"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A description of the milestone.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "due_on",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single milestone",
    "scope": "issues",
    "id": "getMilestone",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/milestones/{milestone_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "milestone_number parameter",
        "enum": null,
        "name": "milestone_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "milestone_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Update a milestone",
    "scope": "issues",
    "id": "updateMilestone",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/milestones/{milestone_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "milestone_number parameter",
        "enum": null,
        "name": "milestone_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the milestone.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The state of the milestone. Either `open` or `closed`.",
        "enum": ["open", "closed"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A description of the milestone.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "due_on",
        "type": "string",
        "required": false
      },
      {
        "alias": "milestone_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Delete a milestone",
    "scope": "issues",
    "id": "deleteMilestone",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/milestones/{milestone_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "milestone_number parameter",
        "enum": null,
        "name": "milestone_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "milestone_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Get labels for every issue in a milestone",
    "scope": "issues",
    "id": "listLabelsForMilestone",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "milestone_number parameter",
        "enum": null,
        "name": "milestone_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "milestone_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List your notifications in a repository",
    "scope": "activity",
    "id": "listNotificationsForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/notifications",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If `true`, show notifications marked as read.",
        "enum": null,
        "name": "all",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
        "enum": null,
        "name": "participating",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "before",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Mark notifications as read in a repository",
    "scope": "activity",
    "id": "markNotificationsAsReadForRepo",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/notifications",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Describes the last point that notifications were checked. Anything updated since this time will not be updated. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
        "enum": null,
        "name": "last_read_at",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get information about a Pages site",
    "scope": "repos",
    "id": "getPages",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pages",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Enable a Pages site",
    "scope": "repos",
    "id": "enablePagesSite",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pages",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "source parameter",
        "enum": null,
        "name": "source",
        "type": "object",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The repository branch used to publish your [site's source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/). Can be either `master` or `gh-pages`.",
        "enum": ["master", "gh-pages"],
        "name": "source.branch",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`.",
        "enum": null,
        "name": "source.path",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Disable a Pages site",
    "scope": "repos",
    "id": "disablePagesSite",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/pages",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Update information about a Pages site",
    "scope": "repos",
    "id": "updateInformationAboutPagesSite",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/pages",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).\"",
        "enum": null,
        "name": "cname",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`.",
        "enum": ["\"gh-pages\"", "\"master\"", "\"master /docs\""],
        "name": "source",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Request a page build",
    "scope": "repos",
    "id": "requestPageBuild",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pages/builds",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List Pages builds",
    "scope": "repos",
    "id": "listPagesBuilds",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pages/builds",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get latest Pages build",
    "scope": "repos",
    "id": "getLatestPagesBuild",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pages/builds/latest",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a specific Pages build",
    "scope": "repos",
    "id": "getPagesBuild",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pages/builds/{build_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "build_id parameter",
        "enum": null,
        "name": "build_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List repository projects",
    "scope": "projects",
    "id": "listForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a repository project",
    "scope": "projects",
    "id": "createForRepo",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the project.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the project.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List pull requests",
    "scope": "pulls",
    "id": "list",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `open`, `closed`, or `all` to filter by state.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
        "enum": null,
        "name": "head",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filter pulls by base branch name. Example: `gh-pages`.",
        "enum": null,
        "name": "base",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).",
        "enum": ["created", "updated", "popularity", "long-running"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a pull request",
    "scope": "pulls",
    "id": "create",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the new pull request.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
        "enum": null,
        "name": "head",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
        "enum": null,
        "name": "base",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the pull request.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
        "enum": null,
        "name": "maintainer_can_modify",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.",
        "enum": null,
        "name": "draft",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "List comments in a repository",
    "scope": "pulls",
    "id": "listCommentsForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be either `created` or `updated` comments.",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single comment",
    "scope": "pulls",
    "id": "getComment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a comment",
    "scope": "pulls",
    "id": "updateComment",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The text of the reply to the review comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a comment",
    "scope": "pulls",
    "id": "deleteComment",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List reactions for a pull request review comment",
    "scope": "reactions",
    "id": "listForPullRequestReviewComment",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create reaction for a pull request review comment",
    "scope": "reactions",
    "id": "createForPullRequestReviewComment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single pull request",
    "scope": "pulls",
    "id": "get",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Update a pull request",
    "scope": "pulls",
    "id": "update",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The title of the pull request.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The contents of the pull request.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "State of this Pull Request. Either `open` or `closed`.",
        "enum": ["open", "closed"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
        "enum": null,
        "name": "base",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
        "enum": null,
        "name": "maintainer_can_modify",
        "type": "boolean",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List comments on a pull request",
    "scope": "pulls",
    "id": "listComments",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be either `created` or `updated` comments.",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Create a comment",
    "scope": "pulls",
    "id": "createComment",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The text of the review comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
        "enum": null,
        "name": "commit_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The relative path to the file that necessitates a comment.",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
        "enum": null,
        "name": "position",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
        "enum": ["LEFT", "RIGHT"],
        "name": "side",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
        "enum": null,
        "name": "line",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.",
        "enum": null,
        "name": "start_line",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
        "enum": ["LEFT", "RIGHT", "side"],
        "name": "start_side",
        "type": "string",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      },
      {
        "alias": null,
        "allowNull": null,
        "deprecated": true,
        "description": "The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.",
        "enum": null,
        "name": "in_reply_to",
        "type": "integer",
        "required": null
      }
    ]
  },
  {
    "name": "Create a comment",
    "scope": "pulls",
    "id": "createCommentReply",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The text of the review comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
        "enum": null,
        "name": "commit_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The relative path to the file that necessitates a comment.",
        "enum": null,
        "name": "path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
        "enum": null,
        "name": "position",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
        "enum": ["LEFT", "RIGHT"],
        "name": "side",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
        "enum": null,
        "name": "line",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.",
        "enum": null,
        "name": "start_line",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
        "enum": ["LEFT", "RIGHT", "side"],
        "name": "start_side",
        "type": "string",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      },
      {
        "alias": null,
        "allowNull": null,
        "deprecated": true,
        "description": "The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.",
        "enum": null,
        "name": "in_reply_to",
        "type": "integer",
        "required": null
      }
    ]
  },
  {
    "name": "Create a review comment reply",
    "scope": "pulls",
    "id": "createReviewCommentReply",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_id parameter",
        "enum": null,
        "name": "comment_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The text of the review comment.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List commits on a pull request",
    "scope": "pulls",
    "id": "listCommits",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List pull requests files",
    "scope": "pulls",
    "id": "listFiles",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/files",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Get if a pull request has been merged",
    "scope": "pulls",
    "id": "checkIfMerged",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Merge a pull request (Merge Button)",
    "scope": "pulls",
    "id": "merge",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Title for the automatic commit message.",
        "enum": null,
        "name": "commit_title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Extra detail to append to automatic commit message.",
        "enum": null,
        "name": "commit_message",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "SHA that pull request head must match to allow merge.",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
        "enum": ["merge", "squash", "rebase"],
        "name": "merge_method",
        "type": "string",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List review requests",
    "scope": "pulls",
    "id": "listReviewRequests",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Create a review request",
    "scope": "pulls",
    "id": "createReviewRequest",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An array of user `login`s that will be requested.",
        "enum": null,
        "name": "reviewers",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An array of team `slug`s that will be requested.",
        "enum": null,
        "name": "team_reviewers",
        "type": "string[]",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Delete a review request",
    "scope": "pulls",
    "id": "deleteReviewRequest",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An array of user `login`s that will be removed.",
        "enum": null,
        "name": "reviewers",
        "type": "string[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An array of team `slug`s that will be removed.",
        "enum": null,
        "name": "team_reviewers",
        "type": "string[]",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "List reviews on a pull request",
    "scope": "pulls",
    "id": "listReviews",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Create a pull request review",
    "scope": "pulls",
    "id": "createReview",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
        "enum": null,
        "name": "commit_id",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review) when you are ready.",
        "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
        "name": "event",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Use the following table to specify the location, destination, and contents of the draft review comment.",
        "enum": null,
        "name": "comments",
        "type": "object[]",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The relative path to the file that necessitates a review comment.",
        "enum": null,
        "name": "comments[].path",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
        "enum": null,
        "name": "comments[].position",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Text of the review comment.",
        "enum": null,
        "name": "comments[].body",
        "type": "string",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Get a single review",
    "scope": "pulls",
    "id": "getReview",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "review_id parameter",
        "enum": null,
        "name": "review_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Delete a pending review",
    "scope": "pulls",
    "id": "deletePendingReview",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "review_id parameter",
        "enum": null,
        "name": "review_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Update a pull request review",
    "scope": "pulls",
    "id": "updateReview",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "review_id parameter",
        "enum": null,
        "name": "review_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The body text of the pull request review.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Get comments for a single review",
    "scope": "pulls",
    "id": "getCommentsForReview",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "review_id parameter",
        "enum": null,
        "name": "review_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Dismiss a pull request review",
    "scope": "pulls",
    "id": "dismissReview",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "review_id parameter",
        "enum": null,
        "name": "review_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The message for the pull request review dismissal",
        "enum": null,
        "name": "message",
        "type": "string",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Submit a pull request review",
    "scope": "pulls",
    "id": "submitReview",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "review_id parameter",
        "enum": null,
        "name": "review_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The body text of the pull request review",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
        "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
        "name": "event",
        "type": "string",
        "required": true
      },
      {
        "alias": "pull_number",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "number",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Update a pull request branch",
    "scope": "pulls",
    "id": "updateBranch",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "pull_number parameter",
        "enum": null,
        "name": "pull_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits on a repository](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
        "enum": null,
        "name": "expected_head_sha",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get the README",
    "scope": "repos",
    "id": "getReadme",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/readme",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List releases for a repository",
    "scope": "repos",
    "id": "listReleases",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/releases",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a release",
    "scope": "repos",
    "id": "createRelease",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/releases",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the tag.",
        "enum": null,
        "name": "tag_name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
        "enum": null,
        "name": "target_commitish",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the release.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Text describing the contents of the tag.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
        "enum": null,
        "name": "draft",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
        "enum": null,
        "name": "prerelease",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single release asset",
    "scope": "repos",
    "id": "getReleaseAsset",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "asset_id parameter",
        "enum": null,
        "name": "asset_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a release asset",
    "scope": "repos",
    "id": "updateReleaseAsset",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "asset_id parameter",
        "enum": null,
        "name": "asset_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The file name of the asset.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An alternate short description of the asset. Used in place of the filename.",
        "enum": null,
        "name": "label",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a release asset",
    "scope": "repos",
    "id": "deleteReleaseAsset",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "asset_id parameter",
        "enum": null,
        "name": "asset_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Get the latest release",
    "scope": "repos",
    "id": "getLatestRelease",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/releases/latest",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a release by tag name",
    "scope": "repos",
    "id": "getReleaseByTag",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/releases/tags/{tag}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "tag parameter",
        "enum": null,
        "name": "tag",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single release",
    "scope": "repos",
    "id": "getRelease",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/releases/{release_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "release_id parameter",
        "enum": null,
        "name": "release_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a release",
    "scope": "repos",
    "id": "updateRelease",
    "method": "PATCH",
    "url": "/repos/{owner}/{repo}/releases/{release_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "release_id parameter",
        "enum": null,
        "name": "release_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the tag.",
        "enum": null,
        "name": "tag_name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
        "enum": null,
        "name": "target_commitish",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the release.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Text describing the contents of the tag.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "`true` makes the release a draft, and `false` publishes the release.",
        "enum": null,
        "name": "draft",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
        "enum": null,
        "name": "prerelease",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a release",
    "scope": "repos",
    "id": "deleteRelease",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/releases/{release_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "release_id parameter",
        "enum": null,
        "name": "release_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List assets for a release",
    "scope": "repos",
    "id": "listAssetsForRelease",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/releases/{release_id}/assets",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "release_id parameter",
        "enum": null,
        "name": "release_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List Stargazers",
    "scope": "activity",
    "id": "listStargazersForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/stargazers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get the number of additions and deletions per week",
    "scope": "repos",
    "id": "getCodeFrequencyStats",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/stats/code_frequency",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get the last year of commit activity data",
    "scope": "repos",
    "id": "getCommitActivityStats",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/stats/commit_activity",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get contributors list with additions, deletions, and commit counts",
    "scope": "repos",
    "id": "getContributorsStats",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/stats/contributors",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get the weekly commit count for the repository owner and everyone else",
    "scope": "repos",
    "id": "getParticipationStats",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/stats/participation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get the number of commits per hour in each day",
    "scope": "repos",
    "id": "getPunchCardStats",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/stats/punch_card",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create a status",
    "scope": "repos",
    "id": "createStatus",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/statuses/{sha}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "sha parameter",
        "enum": null,
        "name": "sha",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
        "enum": ["error", "failure", "pending", "success"],
        "name": "state",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
        "enum": null,
        "name": "target_url",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the status.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A string label to differentiate this status from the status of other systems.",
        "enum": null,
        "name": "context",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List watchers",
    "scope": "activity",
    "id": "listWatchersForRepo",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/subscribers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a Repository Subscription",
    "scope": "activity",
    "id": "getRepoSubscription",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/subscription",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Set a Repository Subscription",
    "scope": "activity",
    "id": "setRepoSubscription",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/subscription",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines if notifications should be received from this repository.",
        "enum": null,
        "name": "subscribed",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines if all notifications should be blocked from this repository.",
        "enum": null,
        "name": "ignored",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a Repository Subscription",
    "scope": "activity",
    "id": "deleteRepoSubscription",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/subscription",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List tags",
    "scope": "repos",
    "id": "listTags",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/tags",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List teams",
    "scope": "repos",
    "id": "listTeams",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List all topics for a repository",
    "scope": "repos",
    "id": "listTopics",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/topics",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Replace all topics for a repository",
    "scope": "repos",
    "id": "replaceTopics",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/topics",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.",
        "enum": null,
        "name": "names",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Clones",
    "scope": "repos",
    "id": "getClones",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/traffic/clones",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Must be one of: `day`, `week`.",
        "enum": ["day", "week"],
        "name": "per",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List paths",
    "scope": "repos",
    "id": "getTopPaths",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/traffic/popular/paths",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List referrers",
    "scope": "repos",
    "id": "getTopReferrers",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/traffic/popular/referrers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Views",
    "scope": "repos",
    "id": "getViews",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/traffic/views",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Must be one of: `day`, `week`.",
        "enum": ["day", "week"],
        "name": "per",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Transfer a repository",
    "scope": "repos",
    "id": "transfer",
    "method": "POST",
    "url": "/repos/{owner}/{repo}/transfer",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Required:** The username or organization name the repository will be transferred to.",
        "enum": null,
        "name": "new_owner",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
        "enum": null,
        "name": "team_ids",
        "type": "integer[]",
        "required": false
      }
    ]
  },
  {
    "name": "Check if vulnerability alerts are enabled for a repository",
    "scope": "repos",
    "id": "checkVulnerabilityAlerts",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/vulnerability-alerts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Enable vulnerability alerts",
    "scope": "repos",
    "id": "enableVulnerabilityAlerts",
    "method": "PUT",
    "url": "/repos/{owner}/{repo}/vulnerability-alerts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Disable vulnerability alerts",
    "scope": "repos",
    "id": "disableVulnerabilityAlerts",
    "method": "DELETE",
    "url": "/repos/{owner}/{repo}/vulnerability-alerts",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get archive link",
    "scope": "repos",
    "id": "getArchiveLink",
    "method": "GET",
    "url": "/repos/{owner}/{repo}/{archive_format}/{ref}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "archive_format parameter",
        "enum": null,
        "name": "archive_format",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ref parameter",
        "enum": null,
        "name": "ref",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Create repository using a repository template",
    "scope": "repos",
    "id": "createUsingTemplate",
    "method": "POST",
    "url": "/repos/{template_owner}/{template_repo}/generate",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "template_owner parameter",
        "enum": null,
        "name": "template_owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "template_repo parameter",
        "enum": null,
        "name": "template_repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the new repository.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the new repository.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to create a new private repository or `false` to create a new public one.",
        "enum": null,
        "name": "private",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "List all public repositories",
    "scope": "repos",
    "id": "listPublic",
    "method": "GET",
    "url": "/repositories",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The integer ID of the last Repository that you've seen.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a list of provisioned identities",
    "scope": "scim",
    "id": "listProvisionedIdentities",
    "method": "GET",
    "url": "/scim/v2/organizations/{org}/Users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Used for pagination: the index of the first result to return.",
        "enum": null,
        "name": "startIndex",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Used for pagination: the number of results to return.",
        "enum": null,
        "name": "count",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query: `?filter=userName%20eq%20\\\"Octocat\\\"`.",
        "enum": null,
        "name": "filter",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Provision and invite users",
    "scope": "scim",
    "id": "provisionAndInviteUsers",
    "method": "POST",
    "url": "/scim/v2/organizations/{org}/Users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Provision and invite users",
    "scope": "scim",
    "id": "provisionInviteUsers",
    "method": "POST",
    "url": "/scim/v2/organizations/{org}/Users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get provisioning details for a single user",
    "scope": "scim",
    "id": "getProvisioningDetailsForUser",
    "method": "GET",
    "url": "/scim/v2/organizations/{org}/Users/{scim_user_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "scim_user_id parameter",
        "enum": null,
        "name": "scim_user_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "scim_user_id",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "external_identity_guid",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Replace a provisioned user's information",
    "scope": "scim",
    "id": "replaceProvisionedUserInformation",
    "method": "PUT",
    "url": "/scim/v2/organizations/{org}/Users/{scim_user_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "scim_user_id parameter",
        "enum": null,
        "name": "scim_user_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "scim_user_id",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "external_identity_guid",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Replace a provisioned user's information",
    "scope": "scim",
    "id": "updateProvisionedOrgMembership",
    "method": "PUT",
    "url": "/scim/v2/organizations/{org}/Users/{scim_user_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "scim_user_id parameter",
        "enum": null,
        "name": "scim_user_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "scim_user_id",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "external_identity_guid",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Update a user attribute",
    "scope": "scim",
    "id": "updateUserAttribute",
    "method": "PATCH",
    "url": "/scim/v2/organizations/{org}/Users/{scim_user_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "scim_user_id parameter",
        "enum": null,
        "name": "scim_user_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "scim_user_id",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "external_identity_guid",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Remove a user from the organization",
    "scope": "scim",
    "id": "removeUserFromOrg",
    "method": "DELETE",
    "url": "/scim/v2/organizations/{org}/Users/{scim_user_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "scim_user_id parameter",
        "enum": null,
        "name": "scim_user_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": "scim_user_id",
        "allowNull": null,
        "deprecated": true,
        "description": null,
        "enum": null,
        "name": "external_identity_guid",
        "type": null,
        "required": null
      }
    ]
  },
  {
    "name": "Search code",
    "scope": "search",
    "id": "code",
    "method": "GET",
    "url": "/search/code",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers.",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": ["indexed"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Search commits",
    "scope": "search",
    "id": "commits",
    "method": "GET",
    "url": "/search/commits",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers.",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": ["author-date", "committer-date"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Search issues and pull requests",
    "scope": "search",
    "id": "issuesAndPullRequests",
    "method": "GET",
    "url": "/search/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": [
          "comments",
          "reactions",
          "reactions-+1",
          "reactions--1",
          "reactions-smile",
          "reactions-thinking_face",
          "reactions-heart",
          "reactions-tada",
          "interactions",
          "created",
          "updated"
        ],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Search issues and pull requests",
    "scope": "search",
    "id": "issues",
    "method": "GET",
    "url": "/search/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": [
          "comments",
          "reactions",
          "reactions-+1",
          "reactions--1",
          "reactions-smile",
          "reactions-thinking_face",
          "reactions-heart",
          "reactions-tada",
          "interactions",
          "created",
          "updated"
        ],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Search labels",
    "scope": "search",
    "id": "labels",
    "method": "GET",
    "url": "/search/labels",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The id of the repository.",
        "enum": null,
        "name": "repository_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Search repositories",
    "scope": "search",
    "id": "repos",
    "method": "GET",
    "url": "/search/repositories",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": ["stars", "forks", "help-wanted-issues", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Search topics",
    "scope": "search",
    "id": "topics",
    "method": "GET",
    "url": "/search/topics",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Search users",
    "scope": "search",
    "id": "users",
    "method": "GET",
    "url": "/search/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers.",
        "enum": null,
        "name": "q",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "enum": ["followers", "repositories", "joined"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "enum": ["desc", "asc"],
        "name": "order",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get team",
    "scope": "teams",
    "id": "get",
    "method": "GET",
    "url": "/teams/{team_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit team",
    "scope": "teams",
    "id": "update",
    "method": "PATCH",
    "url": "/teams/{team_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the team.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the team.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
        "enum": ["secret", "closed"],
        "name": "privacy",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
        "enum": ["pull", "push", "admin"],
        "name": "permission",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The ID of a team to set as the parent team. **Note**: You must pass the `hellcat-preview` media type to use this parameter.",
        "enum": null,
        "name": "parent_team_id",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Delete team",
    "scope": "teams",
    "id": "delete",
    "method": "DELETE",
    "url": "/teams/{team_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List discussions",
    "scope": "teams",
    "id": "listDiscussions",
    "method": "GET",
    "url": "/teams/{team_id}/discussions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a discussion",
    "scope": "teams",
    "id": "createDiscussion",
    "method": "POST",
    "url": "/teams/{team_id}/discussions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The discussion post's title.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The discussion post's body text.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
        "enum": null,
        "name": "private",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single discussion",
    "scope": "teams",
    "id": "getDiscussion",
    "method": "GET",
    "url": "/teams/{team_id}/discussions/{discussion_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a discussion",
    "scope": "teams",
    "id": "updateDiscussion",
    "method": "PATCH",
    "url": "/teams/{team_id}/discussions/{discussion_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The discussion post's title.",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The discussion post's body text.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Delete a discussion",
    "scope": "teams",
    "id": "deleteDiscussion",
    "method": "DELETE",
    "url": "/teams/{team_id}/discussions/{discussion_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List comments",
    "scope": "teams",
    "id": "listDiscussionComments",
    "method": "GET",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a comment",
    "scope": "teams",
    "id": "createDiscussionComment",
    "method": "POST",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The discussion comment's body text.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a single comment",
    "scope": "teams",
    "id": "getDiscussionComment",
    "method": "GET",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_number parameter",
        "enum": null,
        "name": "comment_number",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Edit a comment",
    "scope": "teams",
    "id": "updateDiscussionComment",
    "method": "PATCH",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_number parameter",
        "enum": null,
        "name": "comment_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The discussion comment's body text.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a comment",
    "scope": "teams",
    "id": "deleteDiscussionComment",
    "method": "DELETE",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_number parameter",
        "enum": null,
        "name": "comment_number",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List reactions for a team discussion comment",
    "scope": "reactions",
    "id": "listForTeamDiscussionComment",
    "method": "GET",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_number parameter",
        "enum": null,
        "name": "comment_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create reaction for a team discussion comment",
    "scope": "reactions",
    "id": "createForTeamDiscussionComment",
    "method": "POST",
    "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "comment_number parameter",
        "enum": null,
        "name": "comment_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List reactions for a team discussion",
    "scope": "reactions",
    "id": "listForTeamDiscussion",
    "method": "GET",
    "url": "/teams/{team_id}/discussions/{discussion_number}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create reaction for a team discussion",
    "scope": "reactions",
    "id": "createForTeamDiscussion",
    "method": "POST",
    "url": "/teams/{team_id}/discussions/{discussion_number}/reactions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "discussion_number parameter",
        "enum": null,
        "name": "discussion_number",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
        "enum": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "name": "content",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List pending team invitations",
    "scope": "teams",
    "id": "listPendingInvitations",
    "method": "GET",
    "url": "/teams/{team_id}/invitations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List team members",
    "scope": "teams",
    "id": "listMembers",
    "method": "GET",
    "url": "/teams/{team_id}/members",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
        "enum": ["member", "maintainer", "all"],
        "name": "role",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get team member",
    "scope": "teams",
    "id": "getMember",
    "method": "GET",
    "url": "/teams/{team_id}/members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add team member",
    "scope": "teams",
    "id": "addMember",
    "method": "PUT",
    "url": "/teams/{team_id}/members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Remove team member",
    "scope": "teams",
    "id": "removeMember",
    "method": "DELETE",
    "url": "/teams/{team_id}/members/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get team membership",
    "scope": "teams",
    "id": "getMembership",
    "method": "GET",
    "url": "/teams/{team_id}/memberships/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add or update team membership",
    "scope": "teams",
    "id": "addOrUpdateMembership",
    "method": "PUT",
    "url": "/teams/{team_id}/memberships/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
        "enum": ["member", "maintainer"],
        "name": "role",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Remove team membership",
    "scope": "teams",
    "id": "removeMembership",
    "method": "DELETE",
    "url": "/teams/{team_id}/memberships/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List team projects",
    "scope": "teams",
    "id": "listProjects",
    "method": "GET",
    "url": "/teams/{team_id}/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Review a team project",
    "scope": "teams",
    "id": "reviewProject",
    "method": "GET",
    "url": "/teams/{team_id}/projects/{project_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Add or update team project",
    "scope": "teams",
    "id": "addOrUpdateProject",
    "method": "PUT",
    "url": "/teams/{team_id}/projects/{project_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited from a parent team.",
        "enum": ["read", "write", "admin"],
        "name": "permission",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Remove team project",
    "scope": "teams",
    "id": "removeProject",
    "method": "DELETE",
    "url": "/teams/{team_id}/projects/{project_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "project_id parameter",
        "enum": null,
        "name": "project_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List team repos",
    "scope": "teams",
    "id": "listRepos",
    "method": "GET",
    "url": "/teams/{team_id}/repos",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if a team manages a repository",
    "scope": "teams",
    "id": "checkManagesRepo",
    "method": "GET",
    "url": "/teams/{team_id}/repos/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Add or update team repository",
    "scope": "teams",
    "id": "addOrUpdateRepo",
    "method": "PUT",
    "url": "/teams/{team_id}/repos/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.  \n**Note**: If you pass the `hellcat-preview` media type, you can promote—but not demote—a `permission` attribute inherited through a parent team.",
        "enum": ["pull", "push", "admin"],
        "name": "permission",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Remove team repository",
    "scope": "teams",
    "id": "removeRepo",
    "method": "DELETE",
    "url": "/teams/{team_id}/repos/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List IdP groups for a team",
    "scope": "teams",
    "id": "listIdPGroups",
    "method": "GET",
    "url": "/teams/{team_id}/team-sync/group-mappings",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Create or update IdP group connections",
    "scope": "teams",
    "id": "createOrUpdateIdPGroupConnections",
    "method": "PATCH",
    "url": "/teams/{team_id}/team-sync/group-mappings",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.",
        "enum": null,
        "name": "groups",
        "type": "object[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "ID of the IdP group.",
        "enum": null,
        "name": "groups[].group_id",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Name of the IdP group.",
        "enum": null,
        "name": "groups[].group_name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Description of the IdP group.",
        "enum": null,
        "name": "groups[].group_description",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List child teams",
    "scope": "teams",
    "id": "listChild",
    "method": "GET",
    "url": "/teams/{team_id}/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "team_id parameter",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get the authenticated user",
    "scope": "users",
    "id": "getAuthenticated",
    "method": "GET",
    "url": "/user",
    "parameters": []
  },
  {
    "name": "Update the authenticated user",
    "scope": "users",
    "id": "updateAuthenticated",
    "method": "PATCH",
    "url": "/user",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new name of the user.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The publicly visible email address of the user.",
        "enum": null,
        "name": "email",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new blog URL of the user.",
        "enum": null,
        "name": "blog",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new company of the user.",
        "enum": null,
        "name": "company",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new location of the user.",
        "enum": null,
        "name": "location",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new hiring availability of the user.",
        "enum": null,
        "name": "hireable",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The new short biography of the user.",
        "enum": null,
        "name": "bio",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List blocked users",
    "scope": "users",
    "id": "listBlocked",
    "method": "GET",
    "url": "/user/blocks",
    "parameters": []
  },
  {
    "name": "Check whether you've blocked a user",
    "scope": "users",
    "id": "checkBlocked",
    "method": "GET",
    "url": "/user/blocks/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Block a user",
    "scope": "users",
    "id": "block",
    "method": "PUT",
    "url": "/user/blocks/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Unblock a user",
    "scope": "users",
    "id": "unblock",
    "method": "DELETE",
    "url": "/user/blocks/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Toggle primary email visibility",
    "scope": "users",
    "id": "togglePrimaryEmailVisibility",
    "method": "PATCH",
    "url": "/user/email/visibility",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Specify the _primary_ email address that needs a visibility change.",
        "enum": null,
        "name": "email",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Use `public` to enable an authenticated user to view the specified email address, or use `private` so this primary email address cannot be seen publicly.",
        "enum": null,
        "name": "visibility",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List email addresses for a user",
    "scope": "users",
    "id": "listEmails",
    "method": "GET",
    "url": "/user/emails",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Add email address(es)",
    "scope": "users",
    "id": "addEmails",
    "method": "POST",
    "url": "/user/emails",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
        "enum": null,
        "name": "emails",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "Delete email address(es)",
    "scope": "users",
    "id": "deleteEmails",
    "method": "DELETE",
    "url": "/user/emails",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
        "enum": null,
        "name": "emails",
        "type": "string[]",
        "required": true
      }
    ]
  },
  {
    "name": "List the authenticated user's followers",
    "scope": "users",
    "id": "listFollowersForAuthenticatedUser",
    "method": "GET",
    "url": "/user/followers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List who the authenticated user is following",
    "scope": "users",
    "id": "listFollowingForAuthenticatedUser",
    "method": "GET",
    "url": "/user/following",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if you are following a user",
    "scope": "users",
    "id": "checkFollowing",
    "method": "GET",
    "url": "/user/following/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Follow a user",
    "scope": "users",
    "id": "follow",
    "method": "PUT",
    "url": "/user/following/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Unfollow a user",
    "scope": "users",
    "id": "unfollow",
    "method": "DELETE",
    "url": "/user/following/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List your GPG keys",
    "scope": "users",
    "id": "listGpgKeys",
    "method": "GET",
    "url": "/user/gpg_keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a GPG key",
    "scope": "users",
    "id": "createGpgKey",
    "method": "POST",
    "url": "/user/gpg_keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Your GPG key, generated in ASCII-armored format. See \"[Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/)\" for help creating a GPG key.",
        "enum": null,
        "name": "armored_public_key",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single GPG key",
    "scope": "users",
    "id": "getGpgKey",
    "method": "GET",
    "url": "/user/gpg_keys/{gpg_key_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gpg_key_id parameter",
        "enum": null,
        "name": "gpg_key_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a GPG key",
    "scope": "users",
    "id": "deleteGpgKey",
    "method": "DELETE",
    "url": "/user/gpg_keys/{gpg_key_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "gpg_key_id parameter",
        "enum": null,
        "name": "gpg_key_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List installations for a user",
    "scope": "apps",
    "id": "listInstallationsForAuthenticatedUser",
    "method": "GET",
    "url": "/user/installations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List repositories accessible to the user for an installation",
    "scope": "apps",
    "id": "listInstallationReposForAuthenticatedUser",
    "method": "GET",
    "url": "/user/installations/{installation_id}/repositories",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "installation_id parameter",
        "enum": null,
        "name": "installation_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Add repository to installation",
    "scope": "apps",
    "id": "addRepoToInstallation",
    "method": "PUT",
    "url": "/user/installations/{installation_id}/repositories/{repository_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "installation_id parameter",
        "enum": null,
        "name": "installation_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repository_id parameter",
        "enum": null,
        "name": "repository_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Remove repository from installation",
    "scope": "apps",
    "id": "removeRepoFromInstallation",
    "method": "DELETE",
    "url": "/user/installations/{installation_id}/repositories/{repository_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "installation_id parameter",
        "enum": null,
        "name": "installation_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repository_id parameter",
        "enum": null,
        "name": "repository_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List all issues across owned and member repositories assigned to the authenticated user",
    "scope": "issues",
    "id": "listForAuthenticatedUser",
    "method": "GET",
    "url": "/user/issues",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
        "enum": ["assigned", "created", "mentioned", "subscribed", "all"],
        "name": "filter",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "enum": null,
        "name": "labels",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
        "enum": ["created", "updated", "comments"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The direction of the sort. Can be either `asc` or `desc`.",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List your public keys",
    "scope": "users",
    "id": "listPublicKeys",
    "method": "GET",
    "url": "/user/keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a public key",
    "scope": "users",
    "id": "createPublicKey",
    "method": "POST",
    "url": "/user/keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A descriptive name for the new key. Use a name that will help you recognize this key in your GitHub account. For example, if you're using a personal Mac, you might call this key \"Personal MacBook Air\".",
        "enum": null,
        "name": "title",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The public SSH key to add to your GitHub account. See \"[Generating a new SSH key](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\" for guidance on how to create a public SSH key.",
        "enum": null,
        "name": "key",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single public key",
    "scope": "users",
    "id": "getPublicKey",
    "method": "GET",
    "url": "/user/keys/{key_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "key_id parameter",
        "enum": null,
        "name": "key_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a public key",
    "scope": "users",
    "id": "deletePublicKey",
    "method": "DELETE",
    "url": "/user/keys/{key_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "key_id parameter",
        "enum": null,
        "name": "key_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Get a user's Marketplace purchases",
    "scope": "apps",
    "id": "listMarketplacePurchasesForAuthenticatedUser",
    "method": "GET",
    "url": "/user/marketplace_purchases",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a user's Marketplace purchases (stubbed)",
    "scope": "apps",
    "id": "listMarketplacePurchasesForAuthenticatedUserStubbed",
    "method": "GET",
    "url": "/user/marketplace_purchases/stubbed",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List your organization memberships",
    "scope": "orgs",
    "id": "listMemberships",
    "method": "GET",
    "url": "/user/memberships/orgs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
        "enum": ["active", "pending"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get your organization membership",
    "scope": "orgs",
    "id": "getMembershipForAuthenticatedUser",
    "method": "GET",
    "url": "/user/memberships/orgs/{org}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Edit your organization membership",
    "scope": "orgs",
    "id": "updateMembership",
    "method": "PATCH",
    "url": "/user/memberships/orgs/{org}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
        "enum": ["active"],
        "name": "state",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Start a user migration",
    "scope": "migrations",
    "id": "startForAuthenticatedUser",
    "method": "POST",
    "url": "/user/migrations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "An array of repositories to include in the migration.",
        "enum": null,
        "name": "repositories",
        "type": "string[]",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Locks the `repositories` to prevent changes during the migration when set to `true`.",
        "enum": null,
        "name": "lock_repositories",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Does not include attachments uploaded to GitHub.com in the migration data when set to `true`. Excluding attachments will reduce the migration archive file size.",
        "enum": null,
        "name": "exclude_attachments",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "Get a list of user migrations",
    "scope": "migrations",
    "id": "listForAuthenticatedUser",
    "method": "GET",
    "url": "/user/migrations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get the status of a user migration",
    "scope": "migrations",
    "id": "getStatusForAuthenticatedUser",
    "method": "GET",
    "url": "/user/migrations/{migration_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Download a user migration archive",
    "scope": "migrations",
    "id": "getArchiveForAuthenticatedUser",
    "method": "GET",
    "url": "/user/migrations/{migration_id}/archive",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Delete a user migration archive",
    "scope": "migrations",
    "id": "deleteArchiveForAuthenticatedUser",
    "method": "DELETE",
    "url": "/user/migrations/{migration_id}/archive",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Unlock a user repository",
    "scope": "migrations",
    "id": "unlockRepoForAuthenticatedUser",
    "method": "DELETE",
    "url": "/user/migrations/{migration_id}/repos/{repo_name}/lock",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "migration_id parameter",
        "enum": null,
        "name": "migration_id",
        "type": "integer",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo_name parameter",
        "enum": null,
        "name": "repo_name",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List your organizations",
    "scope": "orgs",
    "id": "listForAuthenticatedUser",
    "method": "GET",
    "url": "/user/orgs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Create a user project",
    "scope": "projects",
    "id": "createForAuthenticatedUser",
    "method": "POST",
    "url": "/user/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the project.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The description of the project.",
        "enum": null,
        "name": "body",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "List public email addresses for a user",
    "scope": "users",
    "id": "listPublicEmails",
    "method": "GET",
    "url": "/user/public_emails",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List your repositories",
    "scope": "repos",
    "id": "list",
    "method": "GET",
    "url": "/user/repos",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `all`, `public`, or `private`.",
        "enum": ["all", "public", "private"],
        "name": "visibility",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
        "enum": null,
        "name": "affiliation",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
        "enum": ["all", "owner", "public", "private", "member"],
        "name": "type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "enum": ["created", "updated", "pushed", "full_name"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Creates a new repository for the authenticated user",
    "scope": "repos",
    "id": "createForAuthenticatedUser",
    "method": "POST",
    "url": "/user/repos",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The name of the repository.",
        "enum": null,
        "name": "name",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A short description of the repository.",
        "enum": null,
        "name": "description",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "A URL with more information about the repository.",
        "enum": null,
        "name": "homepage",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to create a private repository or `false` to create a public one. Creating private repositories requires a paid GitHub account.",
        "enum": null,
        "name": "private",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable issues for this repository or `false` to disable them.",
        "enum": null,
        "name": "has_issues",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
        "enum": null,
        "name": "has_projects",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
        "enum": null,
        "name": "has_wiki",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
        "enum": null,
        "name": "is_template",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
        "enum": null,
        "name": "team_id",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Pass `true` to create an initial commit with empty README.",
        "enum": null,
        "name": "auto_init",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
        "enum": null,
        "name": "gitignore_template",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
        "enum": null,
        "name": "license_template",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
        "enum": null,
        "name": "allow_squash_merge",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
        "enum": null,
        "name": "allow_merge_commit",
        "type": "boolean",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
        "enum": null,
        "name": "allow_rebase_merge",
        "type": "boolean",
        "required": false
      }
    ]
  },
  {
    "name": "List a user's repository invitations",
    "scope": "repos",
    "id": "listInvitationsForAuthenticatedUser",
    "method": "GET",
    "url": "/user/repository_invitations",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Accept a repository invitation",
    "scope": "repos",
    "id": "acceptInvitation",
    "method": "PATCH",
    "url": "/user/repository_invitations/{invitation_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "invitation_id parameter",
        "enum": null,
        "name": "invitation_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "Decline a repository invitation",
    "scope": "repos",
    "id": "declineInvitation",
    "method": "DELETE",
    "url": "/user/repository_invitations/{invitation_id}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "invitation_id parameter",
        "enum": null,
        "name": "invitation_id",
        "type": "integer",
        "required": true
      }
    ]
  },
  {
    "name": "List repositories being starred by the authenticated user",
    "scope": "activity",
    "id": "listReposStarredByAuthenticatedUser",
    "method": "GET",
    "url": "/user/starred",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "One of `asc` (ascending) or `desc` (descending).",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if you are starring a repository",
    "scope": "activity",
    "id": "checkStarringRepo",
    "method": "GET",
    "url": "/user/starred/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Star a repository",
    "scope": "activity",
    "id": "starRepo",
    "method": "PUT",
    "url": "/user/starred/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Unstar a repository",
    "scope": "activity",
    "id": "unstarRepo",
    "method": "DELETE",
    "url": "/user/starred/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List repositories being watched by the authenticated user",
    "scope": "activity",
    "id": "listWatchedReposForAuthenticatedUser",
    "method": "GET",
    "url": "/user/subscriptions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if you are watching a repository (LEGACY)",
    "scope": "activity",
    "id": "checkWatchingRepoLegacy",
    "method": "GET",
    "url": "/user/subscriptions/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Watch a repository (LEGACY)",
    "scope": "activity",
    "id": "watchRepoLegacy",
    "method": "PUT",
    "url": "/user/subscriptions/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Stop watching a repository (LEGACY)",
    "scope": "activity",
    "id": "stopWatchingRepoLegacy",
    "method": "DELETE",
    "url": "/user/subscriptions/{owner}/{repo}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "owner parameter",
        "enum": null,
        "name": "owner",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "repo parameter",
        "enum": null,
        "name": "repo",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List user teams",
    "scope": "teams",
    "id": "listForAuthenticatedUser",
    "method": "GET",
    "url": "/user/teams",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get all users",
    "scope": "users",
    "id": "list",
    "method": "GET",
    "url": "/users",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "The integer ID of the last User that you've seen.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get a single user",
    "scope": "users",
    "id": "getByUsername",
    "method": "GET",
    "url": "/users/{username}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List events performed by a user",
    "scope": "activity",
    "id": "listEventsForUser",
    "method": "GET",
    "url": "/users/{username}/events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List events for an organization",
    "scope": "activity",
    "id": "listEventsForOrg",
    "method": "GET",
    "url": "/users/{username}/events/orgs/{org}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "org parameter",
        "enum": null,
        "name": "org",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List public events performed by a user",
    "scope": "activity",
    "id": "listPublicEventsForUser",
    "method": "GET",
    "url": "/users/{username}/events/public",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List a user's followers",
    "scope": "users",
    "id": "listFollowersForUser",
    "method": "GET",
    "url": "/users/{username}/followers",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List who a user is following",
    "scope": "users",
    "id": "listFollowingForUser",
    "method": "GET",
    "url": "/users/{username}/following",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Check if one user follows another",
    "scope": "users",
    "id": "checkFollowingForUser",
    "method": "GET",
    "url": "/users/{username}/following/{target_user}",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "target_user parameter",
        "enum": null,
        "name": "target_user",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List public gists for the specified user",
    "scope": "gists",
    "id": "listPublicForUser",
    "method": "GET",
    "url": "/users/{username}/gists",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
        "enum": null,
        "name": "since",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List GPG keys for a user",
    "scope": "users",
    "id": "listGpgKeysForUser",
    "method": "GET",
    "url": "/users/{username}/gpg_keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "Get contextual information about a user",
    "scope": "users",
    "id": "getContextForUser",
    "method": "GET",
    "url": "/users/{username}/hovercard",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
        "enum": ["organization", "repository", "issue", "pull_request"],
        "name": "subject_type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
        "enum": null,
        "name": "subject_id",
        "type": "string",
        "required": false
      }
    ]
  },
  {
    "name": "Get a user installation",
    "scope": "apps",
    "id": "getUserInstallation",
    "method": "GET",
    "url": "/users/{username}/installation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "Get a user installation",
    "scope": "apps",
    "id": "findUserInstallation",
    "method": "GET",
    "url": "/users/{username}/installation",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      }
    ]
  },
  {
    "name": "List public keys for a user",
    "scope": "users",
    "id": "listPublicKeysForUser",
    "method": "GET",
    "url": "/users/{username}/keys",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List user organizations",
    "scope": "orgs",
    "id": "listForUser",
    "method": "GET",
    "url": "/users/{username}/orgs",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List user projects",
    "scope": "projects",
    "id": "listForUser",
    "method": "GET",
    "url": "/users/{username}/projects",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
        "enum": ["open", "closed", "all"],
        "name": "state",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List events that a user has received",
    "scope": "activity",
    "id": "listReceivedEventsForUser",
    "method": "GET",
    "url": "/users/{username}/received_events",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List public events that a user has received",
    "scope": "activity",
    "id": "listReceivedPublicEventsForUser",
    "method": "GET",
    "url": "/users/{username}/received_events/public",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List user repositories",
    "scope": "repos",
    "id": "listForUser",
    "method": "GET",
    "url": "/users/{username}/repos",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `all`, `owner`, `member`.",
        "enum": ["all", "owner", "member"],
        "name": "type",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
        "enum": ["created", "updated", "pushed", "full_name"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List repositories being starred by a user",
    "scope": "activity",
    "id": "listReposStarredByUser",
    "method": "GET",
    "url": "/users/{username}/starred",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
        "enum": ["created", "updated"],
        "name": "sort",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "One of `asc` (ascending) or `desc` (descending).",
        "enum": ["asc", "desc"],
        "name": "direction",
        "type": "string",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  },
  {
    "name": "List repositories being watched by a user",
    "scope": "activity",
    "id": "listReposWatchedByUser",
    "method": "GET",
    "url": "/users/{username}/subscriptions",
    "parameters": [
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "username parameter",
        "enum": null,
        "name": "username",
        "type": "string",
        "required": true
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Results per page (max 100)",
        "enum": null,
        "name": "per_page",
        "type": "integer",
        "required": false
      },
      {
        "alias": null,
        "allowNull": false,
        "deprecated": null,
        "description": "Page number of the results to fetch.",
        "enum": null,
        "name": "page",
        "type": "integer",
        "required": false
      }
    ]
  }
]
